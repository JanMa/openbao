"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9190],{48148:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>u});var t=i(74848),o=i(28453);const l={layout:"docs",page_title:"Plugin Development",description:"Learn about OpenBao plugin development."},r="Plugin development",a={id:"plugins/plugin-development",title:"Plugin development",description:"Learn about OpenBao plugin development.",source:"@site/content/docs/plugins/plugin-development.mdx",sourceDirName:"plugins",slug:"/plugins/plugin-development",permalink:"/openbao/docs/plugins/plugin-development",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/plugins/plugin-development.mdx",tags:[],version:"current",frontMatter:{layout:"docs",page_title:"Plugin Development",description:"Learn about OpenBao plugin development."},sidebar:"docs",previous:{title:"External plugin architecture",permalink:"/openbao/docs/plugins/plugin-architecture"},next:{title:"Plugin management",permalink:"/openbao/docs/plugins/plugin-management"}},s={},u=[{value:"Serving a plugin",id:"serving-a-plugin",level:2},{value:"Serving a plugin with multiplexing",id:"serving-a-plugin-with-multiplexing",level:3},{value:"Plugin backwards compatibility with OpenBao",id:"plugin-backwards-compatibility-with-openbao",level:2},{value:"Leveraging plugin versioning",id:"leveraging-plugin-versioning",level:2},{value:"Building a plugin from source",id:"building-a-plugin-from-source",level:2},{value:"Plugin development - resources",id:"plugin-development---resources",level:2},{value:"Plugin development - resources - community",id:"plugin-development---resources---community",level:3}];function p(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"plugin-development",children:"Plugin development"}),"\n",(0,t.jsx)(n.p,{children:"~> Advanced topic! Plugin development is a highly advanced topic in OpenBao, and\nis not required knowledge for day-to-day usage. If you don't plan on writing any\nplugins, we recommend not reading this section of the documentation."}),"\n",(0,t.jsx)(n.p,{children:"Because OpenBao communicates to plugins over a RPC interface, you can build and\ndistribute a plugin for OpenBao without having to rebuild OpenBao itself. This makes\nit easy for you to build an OpenBao plugin for your organization's internal use,\nfor a proprietary API that you don't want to open source, or to prototype\nsomething before contributing it back to the main project."}),"\n",(0,t.jsx)(n.p,{children:"In theory, because the plugin interface is HTTP, you could even develop a plugin\nusing a completely different programming language! (Disclaimer, you would also\nhave to re-implement the plugin API which is not a trivial amount of work.)"}),"\n",(0,t.jsxs)(n.p,{children:["Developing a plugin is simple. The only knowledge necessary to write\na plugin is basic command-line skills and basic knowledge of the\n",(0,t.jsx)(n.a,{href:"http://golang.org",children:"Go programming language"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Your plugin implementation needs to satisfy the interface for the plugin\ntype you want to build. You can find these definitions in the docs for the\nbackend running the plugin."}),"\n",(0,t.jsx)(n.p,{children:"~> Note: Plugins should be prepared to handle multiple concurrent requests\nfrom OpenBao."}),"\n",(0,t.jsx)(n.h2,{id:"serving-a-plugin",children:"Serving a plugin"}),"\n",(0,t.jsx)(n.h3,{id:"serving-a-plugin-with-multiplexing",children:"Serving a plugin with multiplexing"}),"\n",(0,t.jsxs)(n.p,{children:["~> Plugin multiplexing requires ",(0,t.jsx)(n.code,{children:"github.com/openbao/openbao/sdk v0.5.4"})," or above."]}),"\n",(0,t.jsx)(n.p,{children:"The following code exhibits an example main package for an OpenBao plugin using\nthe OpenBao SDK for a secrets engine or auth method:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"os"\n\n\tmyPlugin "your/plugin/import/path"\n\t"github.com/openbao/openbao/api"\n\t"github.com/openbao/openbao/sdk/plugin"\n)\n\nfunc main() {\n\tapiClientMeta := &api.PluginAPIClientMeta{}\n\tflags := apiClientMeta.FlagSet()\n\tflags.Parse(os.Args[1:])\n\n\ttlsConfig := apiClientMeta.GetTLSConfig()\n\ttlsProviderFunc := api.VaultPluginTLSProvider(tlsConfig)\n\n\terr := plugin.ServeMultiplex(&plugin.ServeOpts{\n\t\tBackendFactoryFunc: myPlugin.Factory,\n\t\tTLSProviderFunc:    tlsProviderFunc,\n\t})\n\tif err != nil {\n\t\tlogger := hclog.New(&hclog.LoggerOptions{})\n\n\t\tlogger.Error("plugin shutting down", "error", err)\n\t\tos.Exit(1)\n\t}\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And that's basically it! You would just need to change ",(0,t.jsx)(n.code,{children:"myPlugin"})," to your actual\nplugin."]}),"\n",(0,t.jsx)(n.h2,{id:"plugin-backwards-compatibility-with-openbao",children:"Plugin backwards compatibility with OpenBao"}),"\n",(0,t.jsx)(n.p,{children:"Let's take a closer look at a snippet from the above main package."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"\terr := plugin.ServeMultiplex(&plugin.ServeOpts{\n\t\tBackendFactoryFunc: myPlugin.Factory,\n\t\tTLSProviderFunc:    tlsProviderFunc,\n\t})\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The call to ",(0,t.jsx)(n.code,{children:"plugin.ServeMultiplex"})," ensures that the plugin will use\nOpenBao's ",(0,t.jsx)(n.a,{href:"/docs/plugins/plugin-architecture#plugin-multiplexing",children:"plugin\nmultiplexing"})," feature.\nHowever, this plugin will not be multiplexed if it is run by a version of OpenBao\nthat does not support multiplexing. OpenBao will simply fall back to a plugin\nversion that it can run. Additionally, we set the ",(0,t.jsx)(n.code,{children:"TLSProviderFunc"})," to ensure\nthat our plugin is backwards compatible with versions of OpenBao that do not\nsupport automatic mutual TLS for secure ",(0,t.jsx)(n.a,{href:"/docs/plugins/plugin-architecture#plugin-communication",children:"plugin\ncommunication"}),". If you\nare certain your plugin does not need backwards compatibility, this field can\nbe omitted."]}),"\n",(0,t.jsx)(n.h2,{id:"leveraging-plugin-versioning",children:"Leveraging plugin versioning"}),"\n",(0,t.jsxs)(n.p,{children:["Plugins can optionally self-report their own semantic version. For plugins that\ndo so, OpenBao will automatically populate the plugin's version in the catalog\nwithout requiring the user to provide it. If users do provide a version during\nregistration, OpenBao will error if the version provided does not match what the\nplugin reports. Plugins that report a non-empty version ",(0,t.jsx)(n.em,{children:"must"})," report a valid\n",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"Semantic Version"})," with a leading 'v' added or registration\nwill fail, e.g. ",(0,t.jsx)(n.code,{children:"v1.0.0"})," or ",(0,t.jsx)(n.code,{children:"v2.3.2-beta"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Plugins that want to opt into this behavior can implement the version interface.\nHowever, it is not a prerequisite; users can still provide a version during\nregistration if the plugin does not implement the version interface."}),"\n",(0,t.jsxs)(n.p,{children:["Auth and secrets plugins based on ",(0,t.jsx)(n.code,{children:"framework.Backend"})," from the SDK should set the\n",(0,t.jsx)(n.a,{href:"https://github.com/openbao/openbao/blob/sdk/v0.6.0/sdk/framework/backend.go#L95-L96",children:(0,t.jsx)(n.code,{children:"RunningVersion"})}),"\nvariable, and the framework will implement the version interface."]}),"\n",(0,t.jsxs)(n.p,{children:["Database plugins have a smaller API than ",(0,t.jsx)(n.code,{children:"framework.Backend"})," exposes, and should\ninstead implement the\n",(0,t.jsx)(n.a,{href:"https://github.com/openbao/openbao/blob/sdk/v0.6.0/sdk/logical/logical.go#L150-L154",children:(0,t.jsx)(n.code,{children:"PluginVersioner"})}),"\ninterface directly."]}),"\n",(0,t.jsx)(n.h2,{id:"building-a-plugin-from-source",children:"Building a plugin from source"}),"\n",(0,t.jsxs)(n.p,{children:["To build a plugin from source, first navigate to the location holding the\ndesired plugin version. Next, run ",(0,t.jsx)(n.code,{children:"go build"})," to obtain a new binary for the\nplugin. Finally,\n",(0,t.jsx)(n.a,{href:"/docs/plugins/plugin-architecture#plugin-registration",children:"register"})," the\nplugin and enable it."]}),"\n",(0,t.jsx)(n.h2,{id:"plugin-development---resources",children:"Plugin development - resources"}),"\n",(0,t.jsxs)(n.p,{children:["For more information on how to register and enable your plugin, refer to the\n",(0,t.jsx)(n.a,{href:"/tutorials/app-integration/plugin-backends",children:"Building Plugin Backends"}),"\ntutorial."]}),"\n",(0,t.jsx)(n.p,{children:"Other HashiCorp plugin development resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/hashicorp/vault-auth-plugin-example",children:"vault-auth-plugin-example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/tutorials/custom-secrets-engine",children:"Custom Secrets Engines"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"plugin-development---resources---community",children:"Plugin development - resources - community"}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/integrations",children:"OpenBao Integrations"})," page to find Community\nplugin examples/guides developed by community members. HashiCorp does not\nvalidate these for correctness."]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const o={},l=t.createContext(o);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);