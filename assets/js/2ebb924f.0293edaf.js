"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3895],{23311:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=s(74848),c=s(28453);const o={sidebar_label:"Consul",description:"Consul Service Registration registers OpenBao as a service in Consul with a default\nhealth check."},t="Consul service registration",l={id:"configuration/service-registration/consul",title:"Consul service registration",description:"Consul Service Registration registers OpenBao as a service in Consul with a default\nhealth check.",source:"@site/content/docs/configuration/service-registration/consul.mdx",sourceDirName:"configuration/service-registration",slug:"/configuration/service-registration/consul",permalink:"/openbao/docs/configuration/service-registration/consul",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/configuration/service-registration/consul.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Consul",description:"Consul Service Registration registers OpenBao as a service in Consul with a default\nhealth check."},sidebar:"docs",previous:{title:"Overview",permalink:"/openbao/docs/configuration/service-registration/"},next:{title:"Kubernetes",permalink:"/openbao/docs/configuration/service-registration/kubernetes"}},r={},a=[{value:"Configuration",id:"configuration",level:2},{value:"<code>consul</code> parameters",id:"consul-parameters",level:2},{value:"ACLs",id:"acls",level:2},{value:"<code>consul</code> examples",id:"consul-examples",level:2},{value:"Local agent",id:"local-agent",level:3},{value:"Detailed customization",id:"detailed-customization",level:3},{value:"Consul via unix socket",id:"consul-via-unix-socket",level:3},{value:"Custom TLS",id:"custom-tls",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"consul-service-registration",children:"Consul service registration"}),"\n",(0,i.jsxs)(n.p,{children:["Consul Service Registration registers OpenBao as a service in ",(0,i.jsx)(n.a,{href:"https://www.consul.io/",title:"Consul by HashiCorp",children:"Consul"})," with\na default health check. When Consul is configured as the storage backend, the stanza\n",(0,i.jsx)(n.code,{children:"service_registration"})," is not needed as it will automatically register OpenBao as a service."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HashiCorp Supported"})," \u2013 Consul Service Registration is officially supported\nby HashiCorp."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'service_registration "consul" {\n  address      = "127.0.0.1:8500"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If OpenBao is running in HA mode, include the transfer protocol (",(0,i.jsx)(n.code,{children:"http://"})," or\n",(0,i.jsx)(n.code,{children:"https://"}),") in the address:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'service_registration "consul" {\n  address      = "http://127.0.0.1:8500"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Once properly configured, an unsealed OpenBao installation should be available and\naccessible at:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"active.openbao.service.consul\n"})}),"\n",(0,i.jsx)(n.p,{children:"Unsealed OpenBao instances in standby mode are available at:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"standby.openbao.service.consul\n"})}),"\n",(0,i.jsx)(n.p,{children:"All unsealed OpenBao instances are available as healthy at:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"openbao.service.consul\n"})}),"\n",(0,i.jsx)(n.p,{children:"Sealed OpenBao instances will mark themselves as unhealthy to avoid being returned\nat Consul's service discovery layer."}),"\n",(0,i.jsxs)(n.h2,{id:"consul-parameters",children:[(0,i.jsx)(n.code,{children:"consul"})," parameters"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"address"})," ",(0,i.jsx)(n.code,{children:'(string: "127.0.0.1:8500")'})," \u2013 Specifies the address of the Consul\nagent to communicate with. This can be an IP address, DNS record, or unix\nsocket. It is recommended that you communicate with a local Consul agent; do\nnot communicate directly with a server."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"check_timeout"})," ",(0,i.jsx)(n.code,{children:'(string: "5s")'})," \u2013 Specifies the check interval used to send\nhealth check information back to Consul. This is specified using a label\nsuffix like ",(0,i.jsx)(n.code,{children:'"30s"'})," or ",(0,i.jsx)(n.code,{children:'"1h"'}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"disable_registration"})," ",(0,i.jsx)(n.code,{children:'(string: "false")'})," \u2013 Specifies whether OpenBao should\nregister itself with Consul."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"scheme"})," ",(0,i.jsx)(n.code,{children:'(string: "http")'}),' \u2013 Specifies the scheme to use when communicating\nwith Consul. This can be set to "http" or "https". It is highly recommended\nyou communicate with Consul over https over non-local connections. When\ncommunicating over a unix socket, this option is ignored.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"service"})," ",(0,i.jsx)(n.code,{children:'(string: "openbao")'})," \u2013 Specifies the name of the service to register\nin Consul."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"service_tags"})," ",(0,i.jsx)(n.code,{children:'(string: "")'})," \u2013 Specifies a comma-separated list of tags to\nattach to the service registration in Consul."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"service_address"})," ",(0,i.jsx)(n.code,{children:"(string: nil)"})," \u2013 Specifies a service-specific address to\nset on the service registration in Consul. If unset, OpenBao will use what it\nknows to be the HA redirect address - which is usually desirable. Setting\nthis parameter to ",(0,i.jsx)(n.code,{children:'""'})," will tell Consul to leverage the configuration of the\nnode the service is registered on dynamically. This could be beneficial if\nyou intend to leverage Consul's\n",(0,i.jsx)(n.a,{href:"/consul/docs/agent/options#translate_wan_addrs",title:"Consul Configuration",children:(0,i.jsx)(n.code,{children:"translate_wan_addrs"})})," parameter."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"token"})," ",(0,i.jsx)(n.code,{children:'(string: "")'})," \u2013 Specifies the ",(0,i.jsx)(n.a,{href:"/consul/docs/guides/acl",title:"Consul ACLs",children:"Consul ACL token"})," with\npermission to register the OpenBao service into Consul's service catalog.\nThis is ",(0,i.jsx)(n.strong,{children:"not"})," an OpenBao token. See the ACL section below for help."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The following settings apply when communicating with Consul via an encrypted\nconnection. You can read more about encrypting Consul connections on the\n",(0,i.jsx)(n.a,{href:"/consul/docs/agent/encryption",title:"Consul Encryption",children:"Consul encryption page"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls_ca_file"})," ",(0,i.jsx)(n.code,{children:'(string: "")'})," \u2013 Specifies the path to the CA certificate used\nfor Consul communication. This defaults to system bundle if not specified.\nThis should be set according to the\n",(0,i.jsx)(n.a,{href:"/consul/docs/agent/config/config-files#ca_file",children:(0,i.jsx)(n.code,{children:"ca_file"})})," setting in\nConsul."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls_cert_file"})," ",(0,i.jsx)(n.code,{children:'(string: "")'})," (optional) \u2013 Specifies the path to the\ncertificate for Consul communication. This should be set according to the\n",(0,i.jsx)(n.a,{href:"/consul/docs/agent/config/config-files#cert_file",children:(0,i.jsx)(n.code,{children:"cert_file"})})," setting\nin Consul."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls_key_file"})," ",(0,i.jsx)(n.code,{children:'(string: "")'})," \u2013 Specifies the path to the private key for\nConsul communication. This should be set according to the\n",(0,i.jsx)(n.a,{href:"/consul/docs/agent/config/config-files#key_file",children:(0,i.jsx)(n.code,{children:"key_file"})})," setting\nin Consul."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls_min_version"})," ",(0,i.jsx)(n.code,{children:'(string: "tls12")'})," \u2013 Specifies the minimum TLS version to\nuse. Accepted values are ",(0,i.jsx)(n.code,{children:'"tls10"'}),", ",(0,i.jsx)(n.code,{children:'"tls11"'}),", ",(0,i.jsx)(n.code,{children:'"tls12"'})," or ",(0,i.jsx)(n.code,{children:'"tls13"'}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tls_skip_verify"})," ",(0,i.jsx)(n.code,{children:'(string: "false")'})," \u2013 Disable verification of TLS certificates.\nUsing this option is highly discouraged."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"acls",children:"ACLs"}),"\n",(0,i.jsxs)(n.p,{children:["If using ACLs in Consul, you'll need appropriate permissions to register the\nOpenBao service. The following ACL policy will work for most use-cases, assuming\nthat your service name is ",(0,i.jsx)(n.code,{children:"openbao"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "service": {\n    "openbao": {\n      "policy": "write"\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"consul-examples",children:[(0,i.jsx)(n.code,{children:"consul"})," examples"]}),"\n",(0,i.jsx)(n.h3,{id:"local-agent",children:"Local agent"}),"\n",(0,i.jsxs)(n.p,{children:["This example shows a sample configuration which communicates with a local\nConsul agent running on ",(0,i.jsx)(n.code,{children:"127.0.0.1:8500"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'service_registration "consul" {}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"detailed-customization",children:"Detailed customization"}),"\n",(0,i.jsx)(n.p,{children:"This example shows communicating with Consul on a custom address with an ACL\ntoken."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'service_registration "consul" {\n  address = "10.5.7.92:8194"\n  token   = "abcd1234"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"consul-via-unix-socket",children:"Consul via unix socket"}),"\n",(0,i.jsx)(n.p,{children:"This example shows communicating with Consul over a local unix socket."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'service_registration "consul" {\n  address = "unix:///tmp/.consul.http.sock"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-tls",children:"Custom TLS"}),"\n",(0,i.jsx)(n.p,{children:"This example shows using a custom CA, certificate, and key file to securely\ncommunicate with Consul over TLS."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'service_registration "consul" {\n  scheme        = "https"\n  tls_ca_file   = "/etc/pem/openbao.ca"\n  tls_cert_file = "/etc/pem/openbao.cert"\n  tls_key_file  = "/etc/pem/openbao.key"\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(96540);const c={},o=i.createContext(c);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);