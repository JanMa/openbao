"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4360],{15040:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=s(74848),o=s(28453);const i={layout:"docs",page_title:"operator rekey - Command",description:'The "operator rekey" command generates a new set of unseal keys. This can\noptionally change the total number of key shares or the required threshold of\nthose key shares to reconstruct the root key. This operation is zero\ndowntime, but it requires the OpenBao is unsealed and a quorum of existing\nunseal keys are provided.'},t="operator rekey",a={id:"commands/operator/rekey",title:"operator rekey",description:'The "operator rekey" command generates a new set of unseal keys. This can\noptionally change the total number of key shares or the required threshold of\nthose key shares to reconstruct the root key. This operation is zero\ndowntime, but it requires the OpenBao is unsealed and a quorum of existing\nunseal keys are provided.',source:"@site/content/docs/commands/operator/rekey.mdx",sourceDirName:"commands/operator",slug:"/commands/operator/rekey",permalink:"/openbao/docs/commands/operator/rekey",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/commands/operator/rekey.mdx",tags:[],version:"current",frontMatter:{layout:"docs",page_title:"operator rekey - Command",description:'The "operator rekey" command generates a new set of unseal keys. This can\noptionally change the total number of key shares or the required threshold of\nthose key shares to reconstruct the root key. This operation is zero\ndowntime, but it requires the OpenBao is unsealed and a quorum of existing\nunseal keys are provided.'},sidebar:"tutorialSidebar",previous:{title:"operator raft",permalink:"/openbao/docs/commands/operator/raft"},next:{title:"operator rotate",permalink:"/openbao/docs/commands/operator/rotate"}},l={},d=[{value:"Examples",id:"examples",level:2},{value:"Usage",id:"usage",level:2},{value:"Output options",id:"output-options",level:3},{value:"Command options",id:"command-options",level:3},{value:"Backup options",id:"backup-options",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"operator-rekey",children:"operator rekey"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"operator rekey"})," command generates a new set of unseal keys. This can\noptionally change the total number of key shares or the required threshold of\nthose key shares to reconstruct the root key. This operation is zero downtime,\nbut it requires the OpenBao is unsealed and a quorum of existing unseal keys are\nprovided."]}),"\n",(0,r.jsx)(n.p,{children:'An unseal key may be provided directly on the command line as an argument to the\ncommand. If key is specified as "-", the command will read from stdin. If a TTY\nis available, the command will prompt for text.'}),"\n",(0,r.jsxs)(n.p,{children:["Please see the ",(0,r.jsx)(n.a,{href:"/tutorials/operations/rekeying-and-rotating",children:"rotating and rekeying"})," for\nstep-by-step instructions."]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"Initialize a rekey:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator rekey \\\n    -init \\\n    -key-shares=15 \\\n    -key-threshold=9\n"})}),"\n",(0,r.jsx)(n.p,{children:"Initialize a rekey when Auto Unseal is used for the OpenBao cluster:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator rekey \\\n    -target=recovery \\\n    -init \\\n    -key-shares=15 \\\n    -key-threshold=9\n"})}),"\n",(0,r.jsx)(n.p,{children:"Initialize a rekey and activate the verification process:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator rekey \\\n    -init \\\n    -key-shares=15 \\\n    -key-threshold=9 \\\n    -verify\n"})}),"\n",(0,r.jsx)(n.p,{children:"Rekey and encrypt the resulting unseal keys with PGP:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:'$ bao operator rekey \\\n    -init \\\n    -key-shares=3 \\\n    -key-threshold=2 \\\n    -pgp-keys="keybase:hashicorp,keybase:jefferai,keybase:sethvargo"\n'})}),"\n",(0,r.jsx)(n.p,{children:"Rekey an Auto Unseal OpenBao and encrypt the resulting recovery keys with PGP:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator rekey \\\n    -target=recovery \\\n    -init \\\n    -pgp-keys=keybase:grahamhashicorp\n    -key-shares=1\n    -key-threshold=1\n"})}),"\n",(0,r.jsx)(n.p,{children:"Store encrypted PGP keys in OpenBao's core:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:'$ bao operator rekey \\\n    -init \\\n    -pgp-keys="..." \\\n    -backup\n'})}),"\n",(0,r.jsx)(n.p,{children:"Retrieve backed-up unseal keys:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator rekey -backup-retrieve\n"})}),"\n",(0,r.jsx)(n.p,{children:"Delete backed-up unseal keys:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator rekey -backup-delete\n"})}),"\n",(0,r.jsx)(n.p,{children:"Perform the verification of the rekey using the verification nonce:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell-session",children:'$ bao operator rekey -verify -nonce="..."\n'})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["The following flags are available in addition to the ",(0,r.jsx)(n.a,{href:"/docs/commands",children:"standard set of\nflags"})," included on all commands."]}),"\n",(0,r.jsx)(n.h3,{id:"output-options",children:"Output options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-format"})," ",(0,r.jsx)(n.code,{children:'(string: "table")'}),' - Print the output in the given format. Valid\nformats are "table", "json", or "yaml". This can also be specified via the\n',(0,r.jsx)(n.code,{children:"VAULT_FORMAT"})," environment variable."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"command-options",children:"Command options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-cancel"})," ",(0,r.jsx)(n.code,{children:"(bool: false)"})," - Reset the rekeying progress. This will discard any submitted unseal keys\nor configuration. The default is false."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-init"})," ",(0,r.jsx)(n.code,{children:"(bool: false)"})," - Initialize the rekeying operation. This can only be\ndone if no rekeying operation is in progress. Customize the new number of key\nshares and key threshold using the ",(0,r.jsx)(n.code,{children:"-key-shares"})," and ",(0,r.jsx)(n.code,{children:"-key-threshold flags"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-key-shares"})," ",(0,r.jsx)(n.code,{children:"(int: 5)"}),' - Number of key shares to split the generated master\nkey into. This is the number of "unseal keys" to generate. This is aliased as\n',(0,r.jsx)(n.code,{children:"-n"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-key-threshold"})," ",(0,r.jsx)(n.code,{children:"(int: 3)"})," - Number of key shares required to reconstruct the\nroot key. This must be less than or equal to -key-shares. This is aliased as\n",(0,r.jsx)(n.code,{children:"-t"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-nonce"})," ",(0,r.jsx)(n.code,{children:'(string: "")'})," - Nonce value provided at initialization. The same\nnonce value must be provided with each unseal key."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-pgp-keys"})," ",(0,r.jsx)(n.code,{children:'(string: "...")'})," - Comma-separated list of paths to files on disk\ncontaining public PGP keys OR a comma-separated list of Keybase usernames\nusing the format ",(0,r.jsx)(n.code,{children:"keybase:<username>"}),". When supplied, the generated unseal\nkeys will be encrypted and base64-encoded in the order specified in this list."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-status"})," ",(0,r.jsx)(n.code,{children:"(bool: false)"})," - Print the status of the current attempt without\nproviding an unseal key. The default is false."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-target"})," ",(0,r.jsx)(n.code,{children:'(string: "barrier")'}),' - Target for rekeying. "recovery" only applies\nwhen HSM support is enabled or using ',(0,r.jsx)(n.a,{href:"/docs/concepts/seal#auto-unseal",children:"Auto Unseal"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-verify"})," ",(0,r.jsx)(n.code,{children:"(bool: false)"})," - Indicate during the phase ",(0,r.jsx)(n.code,{children:"-init"})," that the\nverification process is activated for the rekey. Along with ",(0,r.jsx)(n.code,{children:"-nonce"})," option\nit indicates that the nonce given is for the verification process."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"backup-options",children:"Backup options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-backup"})," ",(0,r.jsx)(n.code,{children:"(bool: false)"})," - Store a backup of the current PGP encrypted unseal\nkeys in OpenBao's core. The encrypted values can be recovered in the event of\nfailure or discarded after success. See the -backup-delete and\n-backup-retrieve options for more information. This option only applies when\nthe existing unseal keys were PGP encrypted."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-backup-delete"})," ",(0,r.jsx)(n.code,{children:"(bool: false)"})," - Delete any stored backup unseal keys."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"-backup-retrieve"})," ",(0,r.jsx)(n.code,{children:"(bool: false)"})," - Retrieve the backed-up unseal keys. This\noption is only available if the PGP keys were provided and the backup has not\nbeen deleted."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(96540);const o={},i=r.createContext(o);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);