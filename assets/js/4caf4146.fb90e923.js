"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7818],{82717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(74848),r=n(28453);const i={sidebar_current:"docs-platform-k8s-examples-injector-tls-cert-manager",description:"Describes how to set up the Vault Agent Injector with certificates and keys generated by cert-manager."},c="Vault agent injector TLS with Cert-Manager",s={id:"platform/k8s/helm/examples/injector-tls-cert-manager",title:"Vault agent injector TLS with Cert-Manager",description:"Describes how to set up the Vault Agent Injector with certificates and keys generated by cert-manager.",source:"@site/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx",sourceDirName:"platform/k8s/helm/examples",slug:"/platform/k8s/helm/examples/injector-tls-cert-manager",permalink:"/openbao/docs/platform/k8s/helm/examples/injector-tls-cert-manager",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx",tags:[],version:"current",frontMatter:{sidebar_current:"docs-platform-k8s-examples-injector-tls-cert-manager",description:"Describes how to set up the Vault Agent Injector with certificates and keys generated by cert-manager."},sidebar:"docs",previous:{title:"Vault agent injector TLS configuration",permalink:"/openbao/docs/platform/k8s/helm/examples/injector-tls"},next:{title:"Overview",permalink:"/openbao/docs/platform/k8s/injector/"}},o={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create a certificate authority (CA)",id:"create-a-certificate-authority-ca",level:2},{value:"Create the Vault agent injector certificate",id:"create-the-vault-agent-injector-certificate",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"vault-agent-injector-tls-with-cert-manager",children:"Vault agent injector TLS with Cert-Manager"}),"\n",(0,a.jsxs)(t.p,{children:["The following instructions demonstrate how to configure the Vault Agent Injector to use certificates generated by ",(0,a.jsx)(t.a,{href:"https://cert-manager.io/",children:"cert-manager"}),". This allows you to run multiple replicas of the Vault Agent Injector in a Kubernetes cluster."]}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(t.p,{children:["Install cert-manager if not already installed (see the ",(0,a.jsx)(t.a,{href:"https://cert-manager.io/docs/installation/",children:"cert-manager documentation"}),"). For example, with helm:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"$ helm repo add jetstack https://charts.jetstack.io\n$ helm repo update\n$ helm install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --set installCRDs=true\n"})}),"\n",(0,a.jsx)(t.h2,{id:"create-a-certificate-authority-ca",children:"Create a certificate authority (CA)"}),"\n",(0,a.jsxs)(t.p,{children:["For this example we will bootstrap a self-signed certificate authority (CA) ",(0,a.jsx)(t.a,{href:"https://cert-manager.io/docs/configuration/",children:"Issuer"}),". If you already have a ",(0,a.jsx)(t.a,{href:"https://cert-manager.io/docs/concepts/issuer/",children:"ClusterIssuer"})," configured for your cluster, you may skip this step."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: selfsigned\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: injector-selfsigned-ca\nspec:\n  isCA: true\n  commonName: Agent Inject CA\n  secretName: injector-ca-secret\n  duration: 87660h  # 10 years\n  privateKey:\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: selfsigned\n    kind: Issuer\n    group: cert-manager.io\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: injector-ca-issuer\nspec:\n  ca:\n    secretName: injector-ca-secret\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Save that to a file named ",(0,a.jsx)(t.code,{children:"ca-issuer.yaml"}),", and apply to your Kubernetes cluster:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-console",children:"$ kubectl apply -n vault -f ca-issuer.yaml\nissuer.cert-manager.io/selfsigned created\ncertificate.cert-manager.io/injector-selfsigned-ca created\nissuer.cert-manager.io/injector-ca-issuer created\n\n$ kubectl -n vault get issuers -o wide\nNAME                 READY   STATUS                AGE\ninjector-ca-issuer   True    Signing CA verified   7s\nselfsigned           True                          7s\n\n$ kubectl -n vault get certificates injector-selfsigned-ca -o wide\nNAME                     READY   SECRET               ISSUER       STATUS                                          AGE\ninjector-selfsigned-ca   True    injector-ca-secret   selfsigned   Certificate is up to date and has not expired   32s\n"})}),"\n",(0,a.jsx)(t.h2,{id:"create-the-vault-agent-injector-certificate",children:"Create the Vault agent injector certificate"}),"\n",(0,a.jsx)(t.p,{children:"Next we can create a request for cert-manager to generate a certificate and key\nsigned by the certificate authority above. This certificate and key will be used\nby the Vault Agent Injector for TLS communications with the Kubernetes API."}),"\n",(0,a.jsx)(t.p,{children:"The Certificate request object references the CA issuer created above, and specifies the name of the Secret where the CA, Certificate, and Key will be stored by cert-manager."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: injector-certificate\nspec:\n  secretName: injector-tls\n  duration: 24h\n  renewBefore: 144m  # roughly 10% of 24h\n  dnsNames:\n  - vault-agent-injector-svc\n  - vault-agent-injector-svc.vault\n  - vault-agent-injector-svc.vault.svc\n  issuerRef:\n    name: injector-ca-issuer\n  commonName: Agent Inject Cert\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"warning",children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Important Note:"})," The dnsNames for the certificate must be configured to use the name\nof the Vault Agent Injector Kubernetes service and namespace where it is deployed."]})}),"\n",(0,a.jsxs)(t.p,{children:["In this example the Vault Agent Injector service name is ",(0,a.jsx)(t.code,{children:"vault-agent-injector-svc"})," in the ",(0,a.jsx)(t.code,{children:"vault"})," namespace.\nThis uses the pattern ",(0,a.jsx)(t.code,{children:"<k8s service name>.<k8s namespace>.svc"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"Save the Certificate yaml to a file and apply to your cluster:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"$ kubectl -n vault apply -f injector-certificate.yaml\ncertificate.cert-manager.io/injector-certificate created\n\n$ kubectl -n vault get certificates injector-certificate -o wide\nNAME                   READY   SECRET         ISSUER               STATUS                                          AGE\ninjector-certificate   True    injector-tls   injector-ca-issuer   Certificate is up to date and has not expired   41s\n\n$ kubectl -n vault get secret injector-tls\nNAME           TYPE                DATA   AGE\ninjector-tls   kubernetes.io/tls   3      6m59s\n"})}),"\n",(0,a.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(t.p,{children:"Now that a certificate authority and a signed certificate have been created, we can now configure\nHelm and the Vault Agent Injector to use them."}),"\n",(0,a.jsx)(t.p,{children:"Install the Vault Agent Injector with the following custom values:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:'$ helm install vault hashicorp/vault \\\n  --namespace=vault \\\n  --set injector.replicas=2 \\\n  --set injector.leaderElector.enabled=false \\\n  --set injector.certs.secretName=injector-tls \\\n  --set injector.webhook.annotations="cert-manager.io/inject-ca-from: {{ .Release.Namespace }}/injector-certificate"\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>s});var a=n(96540);const r={},i=a.createContext(r);function c(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);