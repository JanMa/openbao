"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7268],{55120:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>t,toc:()=>d});var s=i(74848),l=i(28453);const a={sidebar_label:"Upgrade plugins",description:"These are general upgrade instructions for OpenBao plugins."},r="Upgrading OpenBao plugins",t={id:"upgrading/plugins",title:"Upgrading OpenBao plugins",description:"These are general upgrade instructions for OpenBao plugins.",source:"@site/content/docs/upgrading/plugins.mdx",sourceDirName:"upgrading",slug:"/upgrading/plugins",permalink:"/openbao/docs/upgrading/plugins",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/upgrading/plugins.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Upgrade plugins",description:"These are general upgrade instructions for OpenBao plugins."},sidebar:"docs",previous:{title:"Upgrade OpenBao HA installations",permalink:"/openbao/docs/upgrading/vault-ha-upgrade"},next:{title:"Overview",permalink:"/openbao/docs/release-notes/"}},o={},d=[{value:"Plugin upgrade procedure",id:"plugin-upgrade-procedure",level:2},{value:"Upgrading auth and secrets plugins",id:"upgrading-auth-and-secrets-plugins",level:3},{value:"Upgrading database plugins",id:"upgrading-database-plugins",level:3},{value:"Downgrading plugins",id:"downgrading-plugins",level:3},{value:"Additional upgrade notes",id:"additional-upgrade-notes",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"upgrading-openbao-plugins",children:"Upgrading OpenBao plugins"}),"\n",(0,s.jsx)(n.h2,{id:"plugin-upgrade-procedure",children:"Plugin upgrade procedure"}),"\n",(0,s.jsx)(n.p,{children:"The following procedures detail steps for upgrading a plugin that has been mounted\nat a path on a running server. The steps are the same whether the plugin being\nupgraded is built-in or external."}),"\n",(0,s.jsx)(n.h3,{id:"upgrading-auth-and-secrets-plugins",children:"Upgrading auth and secrets plugins"}),"\n",(0,s.jsxs)(n.p,{children:["The process is nearly identical for auth and secret plugins. If you are upgrading\nan auth plugin, just replace all usages of ",(0,s.jsx)(n.code,{children:"secrets"})," or ",(0,s.jsx)(n.code,{children:"secret"})," with ",(0,s.jsx)(n.code,{children:"auth"}),"."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/plugins/plugin-architecture#plugin-registration",children:"Register"})," the first version of your plugin to the catalog.\nSkip this step if your initial plugin is built-in or already registered."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao plugin register \\\n    -sha256=<SHA256 Hex value of the plugin binary> \\\n    secret \\\n    my-secret-plugin\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/plugins/plugin-management#enabling-disabling-external-plugins",children:"Mount"})," the plugin. Skip this step if your initial plugin\nis already mounted."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao secrets enable my-secret-plugin\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Register a second version of your plugin. You ",(0,s.jsx)(n.strong,{children:"must"})," use the same plugin\ntype and name (the last two arguments) as the plugin being upgraded. This is\ntrue regardless of whether the plugin being upgraded is built-in or external."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao plugin register \\\n    -sha256=<SHA256 Hex value of the plugin binary> \\\n    -command=my-secret-plugin-1.0.1 \\\n    -version=v1.0.1 \\\n    secret \\\n    my-secret-plugin\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Tune the existing mount to configure it to use the newly registered version."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao secrets tune -plugin-version=v1.0.1 my-secret-plugin\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'If you wish, you can check the updated configuration. Notice the "Version" is\nnow different from the "Running Version".'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao secrets list -detailed\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Finally, trigger a ",(0,s.jsx)(n.a,{href:"/docs/commands/plugin/reload",children:"plugin reload"})," to reload all\nmounted backends using that plugin or a subset of the mounts using that plugin\nwith either the ",(0,s.jsx)(n.code,{children:"plugin"})," or ",(0,s.jsx)(n.code,{children:"mounts"})," flag respectively."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao plugin reload -plugin my-secret-plugin\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Until the last step, the mount will still run the first version of ",(0,s.jsx)(n.code,{children:"my-secret-plugin"}),". When\nthe reload is triggered, OpenBao will kill ",(0,s.jsx)(n.code,{children:"my-secret-plugin"}),"\u2019s process and start the\nnew plugin process for ",(0,s.jsx)(n.code,{children:"my-secret-plugin"}),' version 1.0.1. The "Running Version" should also\nnow match the "Version" when you run ',(0,s.jsx)(n.code,{children:"bao secrets list -detailed"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important:"})," Plugin reload of a new plugin binary must be\nperformed on each OpenBao instance. Performing a plugin upgrade on a single\ninstance or through a load balancer can result in mismatched\nplugin binaries within a cluster. On a replicated cluster this may be accomplished\nby setting the 'scope' parameter of the reload to 'global'."]})}),"\n",(0,s.jsx)(n.h3,{id:"upgrading-database-plugins",children:"Upgrading database plugins"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/plugins/plugin-architecture#plugin-registration",children:"Register"})," the first version of your plugin to the catalog.\nSkip this step if your initial plugin is built-in or already registered."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao plugin register\n    -sha256=<SHA256 Hex value of the plugin binary> \\\n    database \\\n    my-db-plugin\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/plugins/plugin-management#enabling-disabling-external-plugins",children:"Mount"})," the plugin. Skip this step if your initial plugin\nis already mounted."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao secrets enable database\n$ bao write database/config/my-db \\\n    plugin_name=my-db-plugin \\\n    # ...\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Register a second version of your plugin. You ",(0,s.jsx)(n.strong,{children:"must"})," use the same plugin\ntype and name (the last two arguments) as the plugin being upgraded. This is\ntrue regardless of whether the plugin being upgraded is built-in or external."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao plugin register \\\n    -sha256=<SHA256 Hex value of the plugin binary> \\\n    -command=my-db-plugin-1.0.1 \\\n    -version=v1.0.1 \\\n    database \\\n    my-db-plugin\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Update the database config with the new version. The database secrets\nengine will immediately reload the plugin, using the new version. Any omitted\nconfig parameters will not be updated."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao write database/config/my-db \\\n    plugin_version=v1.0.1\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Until the last step, the mount will still run the first version of ",(0,s.jsx)(n.code,{children:"my-db-plugin"}),". When\nthe reload is triggered, OpenBao will kill ",(0,s.jsx)(n.code,{children:"my-db-plugin"}),"\u2019s process and start the\nnew plugin process for ",(0,s.jsx)(n.code,{children:"my-db-plugin"})," version 1.0.1."]}),"\n",(0,s.jsx)(n.h3,{id:"downgrading-plugins",children:"Downgrading plugins"}),"\n",(0,s.jsx)(n.p,{children:"Plugin downgrades follow the same procedure as upgrades. You can use the OpenBao\nplugin list command to check what plugin versions are available to downgrade to:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao plugin list secret\nName                Version\n----                -------\ncassandra           v1.12.0+builtin.bao\nkv                  v0.13.3+builtin\nldap                v1.12.0+builtin.bao\nmysql               v1.12.0+builtin.bao\nopenldap            v0.9.0+builtin\npki                 v1.12.0+builtin.bao\npostgresql          v1.12.0+builtin.bao\nrabbitmq            v1.12.0+builtin.bao\nssh                 v1.12.0+builtin.bao\ntotp                v1.12.0+builtin.bao\ntransit             v1.12.0+builtin.bao\n"})}),"\n",(0,s.jsx)(n.h3,{id:"additional-upgrade-notes",children:"Additional upgrade notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"As mentioned earlier, disabling existing mounts will wipe the existing data."}),"\n",(0,s.jsx)(n.li,{children:"Overwriting an existing version in the catalog will affect all uses of that\nplugin version. So if you have 5 different Secrets mounts using the same plugin,\nthey'll all start using the new binary if you overwrite it. We recommend\ntreating plugin versions in the catalog as immutable, much like version control\ntags."}),"\n",(0,s.jsx)(n.li,{children:"Each plugin has its own data within OpenBao storage. While it is rare for OpenBao\nmaintained plugins to update their storage schema, it is up to plugin authors\nto manage schema upgrades and downgrades. Check the plugin release notes for\nany unsupported upgrade or downgrade transitions, especially before moving to\na new major version or downgrading."}),"\n",(0,s.jsxs)(n.li,{children:["Existing OpenBao ",(0,s.jsx)(n.a,{href:"/docs/concepts/lease",children:"leases"})," and ",(0,s.jsx)(n.a,{href:"/docs/concepts/tokens",children:"tokens"}),"\nare generally unaffected by plugin upgrades and reloads. This is because the lifecycle\nof leases and tokens is handled by core systems within OpenBao. The plugin itself only\nhandles renewal and revocation of them when it\u2019s requested by those core systems."]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var s=i(96540);const l={},a=s.createContext(l);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);