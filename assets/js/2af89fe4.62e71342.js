"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5620],{42627:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>t,metadata:()=>r,toc:()=>h});var s=i(74848),a=i(28453);const t={sidebar_label:"PGP, GnuPG and Keybase",description:"OpenBao has the ability to integrate with OpenPGP-compatible programs like\nGnuPG and services like Keybase.io to provide an additional layer of security\nwhen performing certain operations.  This page details the various PGP\nintegrations, their use, and operation."},o="Using PGP, GnuPG, and keybase",r={id:"concepts/pgp-gpg-keybase",title:"Using PGP, GnuPG, and keybase",description:"OpenBao has the ability to integrate with OpenPGP-compatible programs like\nGnuPG and services like Keybase.io to provide an additional layer of security\nwhen performing certain operations.  This page details the various PGP\nintegrations, their use, and operation.",source:"@site/content/docs/concepts/pgp-gpg-keybase.mdx",sourceDirName:"concepts",slug:"/concepts/pgp-gpg-keybase",permalink:"/docs/concepts/pgp-gpg-keybase",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/concepts/pgp-gpg-keybase.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"PGP, GnuPG and Keybase",description:"OpenBao has the ability to integrate with OpenPGP-compatible programs like\nGnuPG and services like Keybase.io to provide an additional layer of security\nwhen performing certain operations.  This page details the various PGP\nintegrations, their use, and operation."},sidebar:"docs",previous:{title:"Autopilot",permalink:"/docs/concepts/integrated-storage/autopilot"},next:{title:"Recovery mode",permalink:"/docs/concepts/recovery-mode"}},l={},h=[{value:"Initializing with PGP",id:"initializing-with-pgp",level:2},{value:"Initializing with keybase",id:"initializing-with-keybase",level:2},{value:"Unsealing with keybase",id:"unsealing-with-keybase",level:3},{value:"Initializing with GnuPG",id:"initializing-with-gnupg",level:2},{value:"Unsealing with GnuPG",id:"unsealing-with-gnupg",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"using-pgp-gnupg-and-keybase",children:"Using PGP, GnuPG, and keybase"}),"\n",(0,s.jsx)(n.p,{children:"OpenBao has the ability to integrate with OpenPGP-compatible programs like GnuPG\nand services like Keybase.io to provide an additional layer of security when\nperforming certain operations. This page details the various PGP integrations,\ntheir use, and operation."}),"\n",(0,s.jsx)(n.p,{children:"Keybase.io support is available only in the command-line tool and not via the\nOpenBao HTTP API, tools that help with initialization should use the Keybase.io\nAPI in order to obtain the PGP keys needed for a secure initialization if you\nwant them to use Keybase for keys."}),"\n",(0,s.jsx)(n.p,{children:"Once the OpenBao has been initialized, it is possible to use Keybase to decrypt\nthe shards and unseal normally."}),"\n",(0,s.jsx)(n.h2,{id:"initializing-with-pgp",children:"Initializing with PGP"}),"\n",(0,s.jsx)(n.p,{children:"One of the early fundamental problems when bootstrapping and initializing OpenBao\nwas that the first user (the initializer) received a plain-text copy of all of\nthe unseal keys. This defeats the promises of OpenBao's security model, and it\nalso makes the distribution of those keys more difficult.\nOpenBao can optionally be initialized using PGP keys. In this mode, OpenBao will\ngenerate the unseal keys and then immediately encrypt them using the given\nusers' public PGP keys. Only the owner of the corresponding private key is then\nable to decrypt the value, revealing the plain-text unseal key."}),"\n",(0,s.jsx)(n.p,{children:"First, you must create, acquire, or import the appropriate key(s) onto the\nlocal machine from which you are initializing OpenBao. This guide will not\nattempt to cover all aspects of PGP keys but give examples using two popular\nprograms: Keybase and GnuPG."}),"\n",(0,s.jsxs)(n.p,{children:["For beginners, we suggest using ",(0,s.jsx)(n.a,{href:"https://keybase.io/",children:"Keybase.io"}),' ("Keybase")\nas it can be both simpler and has a number of useful behaviors and properties\naround key management, such as verification of users\' identities using a number\nof public online sources. It also exposes the ability for users to have PGP\nkeys generated, stored, and managed securely on their servers. Using OpenBao with\nKeybase will be discussed first as it is simpler.']}),"\n",(0,s.jsx)(n.h2,{id:"initializing-with-keybase",children:"Initializing with keybase"}),"\n",(0,s.jsxs)(n.p,{children:["To generate unseal keys for Keybase users, OpenBao accepts the ",(0,s.jsx)(n.code,{children:"keybase:"})," prefix\nto the ",(0,s.jsx)(n.code,{children:"-pgp-keys"})," argument:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ bao operator init -key-shares=3 -key-threshold=2 \\\n    -pgp-keys="keybase:jefferai,keybase:vishalnayak,keybase:sethvargo"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This requires far fewer steps than traditional PGP (e.g. with ",(0,s.jsx)(n.code,{children:"gpg"}),") because\nKeybase handles a few of the tedious steps. The output will be the similar to\nthe following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Key 1: wcBMA37rwGt6FS1VAQgAk1q8XQh6yc...\nKey 2: wcBMA0wwnMXgRzYYAQgAavqbTCxZGD...\nKey 3: wcFMA2DjqDb4YhTAARAAeTFyYxPmUd...\n...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The output should be rather long in comparison to a regular unseal key. These\nkeys are encrypted, and only the user holding the corresponding private key can\ndecrypt the value. The keys are encrypted in the order in which specified in\nthe ",(0,s.jsx)(n.code,{children:"-pgp-keys"})," attribute. As such, the keys belong to respective Keybase\naccounts of ",(0,s.jsx)(n.code,{children:"jefferai"}),", ",(0,s.jsx)(n.code,{children:"vishalnayak"}),", and ",(0,s.jsx)(n.code,{children:"sethvargo"}),". These keys can be\ndistributed over almost any medium, although common sense and judgement are\nbest advised. The encrypted keys are base64 encoded before returning."]}),"\n",(0,s.jsx)(n.h3,{id:"unsealing-with-keybase",children:"Unsealing with keybase"}),"\n",(0,s.jsxs)(n.p,{children:["As a user, the easiest way to decrypt your unseal key is with the Keybase CLI\ntool. You can download it from ",(0,s.jsx)(n.a,{href:"https://keybase.io/download",children:"Keybase.io download\npage"}),". After you have downloaded and configured\nthe Keybase CLI, you are now tasked with entering your unseal key. To get the\nplain-text unseal key, you must decrypt the value given to you by the\ninitializer. To get the plain-text value, run the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ echo "wcBMA37..." | base64 --decode | keybase pgp decrypt\n'})}),"\n",(0,s.jsxs)(n.p,{children:["And replace ",(0,s.jsx)(n.code,{children:"wcBMA37..."})," with the encrypted key."]}),"\n",(0,s.jsx)(n.p,{children:"You will be prompted to enter your Keybase passphrase. The output will be the\nplain-text unseal key."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"6ecb46277133e04b29bd0b1b05e60722dab7cdc684a0d3ee2de50ce4c38a357101\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is your unseal key in plain-text and should be guarded the same way you\nguard a password. Now you can enter your key to the ",(0,s.jsx)(n.code,{children:"unseal"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator unseal\nKey (will be hidden): ...\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"initializing-with-gnupg",children:"Initializing with GnuPG"}),"\n",(0,s.jsxs)(n.p,{children:["GnuPG is an open-source implementation of the OpenPGP standard and is available\non nearly every platform. For more information, please see the ",(0,s.jsx)(n.a,{href:"https://gnupg.org/gph/en/manual.html",children:"GnuPG\nmanual"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"To create a new PGP key, run, following the prompts:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ gpg --gen-key\n"})}),"\n",(0,s.jsx)(n.p,{children:"To import an existing key, download the public key onto disk and run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ gpg --import key.asc\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once you have imported the users' public keys, you need to save their values\nto disk as either base64 or binary key files. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ gpg --export 348FFC4C | base64 > seth.asc\n"})}),"\n",(0,s.jsxs)(n.p,{children:['These key files must exist on disk in base64 (the "standard" base64 character set,\nwithout ASCII armoring) or binary. Once saved to disk, the path to these files\ncan be specified as an argument to the ',(0,s.jsx)(n.code,{children:"-pgp-keys"})," flag."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ bao operator init -key-shares=3 -key-threshold=2 \\\n    -pgp-keys="jeff.asc,vishal.asc,seth.asc"\n'})}),"\n",(0,s.jsx)(n.p,{children:"The result should look something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Key 1: wcBMA37rwGt6FS1VAQgAk1q8XQh6yc...\nKey 2: wcBMA0wwnMXgRzYYAQgAavqbTCxZGD...\nKey 3: wcFMA2DjqDb4YhTAARAAeTFyYxPmUd...\n...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The output should be rather long in comparison to a regular unseal key. These\nkeys are encrypted, and only the user holding the corresponding private key\ncan decrypt the value. The keys are encrypted in the order in which specified\nin the ",(0,s.jsx)(n.code,{children:"-pgp-keys"})," attribute. As such, the first key belongs to Jeff, the second\nto Vishal, and the third to Seth. These keys can be distributed over almost any\nmedium, although common sense and judgement are best advised. The encrypted\nkeys are base64 encoded before returning."]}),"\n",(0,s.jsx)(n.h3,{id:"unsealing-with-gnupg",children:"Unsealing with GnuPG"}),"\n",(0,s.jsx)(n.p,{children:"Assuming you have been given an unseal key that was encrypted using your public\nPGP key, you are now tasked with entering your unseal key. To get the\nplain-text unseal key, you must decrypt the value given to you by the\ninitializer. To get the plain-text value, run the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ echo "wcBMA37..." | base64 --decode | gpg -dq\n'})}),"\n",(0,s.jsxs)(n.p,{children:["And replace ",(0,s.jsx)(n.code,{children:"wcBMA37..."})," with the encrypted key."]}),"\n",(0,s.jsx)(n.p,{children:"If you encrypted your private PGP key with a passphrase, you may be prompted to\nenter it. After you enter your password, the output will be the plain-text\nkey:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"6ecb46277133e04b29bd0b1b05e60722dab7cdc684a0d3ee2de50ce4c38a357101\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is your unseal key in plain-text and should be guarded the same way you\nguard a password. Now you can enter your key to the ",(0,s.jsx)(n.code,{children:"unseal"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao operator unseal\nKey (will be hidden): ...\n"})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(96540);const a={},t=s.createContext(a);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);