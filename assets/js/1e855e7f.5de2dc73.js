"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7633],{22349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>r});var a=t(74848),s=t(28453);const c={sidebar_label:"Examples",description:"This section documents examples of using the Vault Agent Injector."},o="Vault agent injector examples",i={id:"platform/k8s/injector/examples",title:"Vault agent injector examples",description:"This section documents examples of using the Vault Agent Injector.",source:"@site/content/docs/platform/k8s/injector/examples.mdx",sourceDirName:"platform/k8s/injector",slug:"/platform/k8s/injector/examples",permalink:"/openbao/docs/platform/k8s/injector/examples",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/platform/k8s/injector/examples.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Examples",description:"This section documents examples of using the Vault Agent Injector."},sidebar:"docs",previous:{title:"Installation",permalink:"/openbao/docs/platform/k8s/injector/installation"},next:{title:"Overview",permalink:"/openbao/docs/platform/k8s/csi/"}},l={},r=[{value:"Before using the Vault agent injector",id:"before-using-the-vault-agent-injector",level:2},{value:"Connectivity",id:"connectivity",level:3},{value:"Kubernetes and Vault configuration",id:"kubernetes-and-vault-configuration",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Patching existing pods",id:"patching-existing-pods",level:2},{value:"Deployments, StatefulSets, etc.",id:"deployments-statefulsets-etc",level:2},{value:"ConfigMap example",id:"configmap-example",level:2},{value:"Environment variable example",id:"environment-variable-example",level:2},{value:"AppRole authentication",id:"approle-authentication",level:2},{value:"PKI cert example",id:"pki-cert-example",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"vault-agent-injector-examples",children:"Vault agent injector examples"}),"\n",(0,a.jsx)(n.p,{children:"The following are different configuration examples to support a variety of\ndeployment models."}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsx)(n.p,{children:"A common mistake is to set the annotation on the Deployment or other resource.\nEnsure that the injector annotations are specified on the pod specification when\nusing higher level constructs such as deployments, jobs or statefulsets."})}),"\n",(0,a.jsx)(n.h2,{id:"before-using-the-vault-agent-injector",children:"Before using the Vault agent injector"}),"\n",(0,a.jsx)(n.p,{children:"Before applying Vault Agent injection annotations to pods, the following requirements\nshould be satisfied."}),"\n",(0,a.jsx)(n.h3,{id:"connectivity",children:"Connectivity"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["the Kubernetes API can connect to the Vault Agent injector service on port ",(0,a.jsx)(n.code,{children:"443"}),", and\nthe injector can connect to the Kubernetes API,"]}),"\n",(0,a.jsx)(n.li,{children:"Vault can connect to the Kubernetes API,"}),"\n",(0,a.jsx)(n.li,{children:"Pods in the Kubernetes cluster can connect to Vault."}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Note: The Kubernetes API typically runs on the master nodes, and the Vault Agent injector\non a worker node in a Kubernetes cluster. ",(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),"\nOn Kubernetes clusters that have aggregator routing enabled (ex. ",(0,a.jsx)(n.a,{href:"https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#add_firewall_rules",children:"GKE private\nclusters"}),"),\nthe Kubernetes API will connect directly to the injector service endpoint,\nwhich is on port ",(0,a.jsx)(n.code,{children:"8080"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"kubernetes-and-vault-configuration",children:"Kubernetes and Vault configuration"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Kubernetes auth method should be configured and enabled in Vault,"}),"\n",(0,a.jsx)(n.li,{children:"Pod should have a service account,"}),"\n",(0,a.jsx)(n.li,{children:"desired secrets exist within Vault,"}),"\n",(0,a.jsx)(n.li,{children:"the service account should be bound to a Vault role with a policy enabling access to desired secrets."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For more information on configuring the Vault Kubernetes auth method,\n",(0,a.jsx)(n.a,{href:"/docs/auth/kubernetes#configuration",children:"see the official documentation"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,a.jsx)(n.p,{children:"If an error occurs with a mutation request, Kubernetes will attach the error to the\nowner of the pod. Check the following for errors:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If the pod was created by a deployment or statefulset, check for errors in the ",(0,a.jsx)(n.code,{children:"replicaset"}),"\nthat owns the pod."]}),"\n",(0,a.jsxs)(n.li,{children:["If the pod was created by a job, check the ",(0,a.jsx)(n.code,{children:"job"})," for errors."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"patching-existing-pods",children:"Patching existing pods"}),"\n",(0,a.jsx)(n.p,{children:"To patch existing pods, a Kubernetes patch can be applied to add the required annotations\nto pods. When applying a patch, the pods will be rescheduled."}),"\n",(0,a.jsx)(n.p,{children:"First, create the patch:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'cat <<EOF >> ./patch.yaml\nspec:\n  template:\n    metadata:\n      annotations:\n        vault.hashicorp.com/agent-inject: "true"\n        vault.hashicorp.com/agent-inject-status: "update"\n        vault.hashicorp.com/agent-inject-secret-db-creds: "database/creds/db-app"\n        vault.hashicorp.com/agent-inject-template-db-creds: |\n          {{- with secret "database/creds/db-app" -}}\n          postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/appdb?sslmode=disable\n          {{- end }}\n        vault.hashicorp.com/role: "db-app"\n        vault.hashicorp.com/ca-cert: "/vault/tls/ca.crt"\n        vault.hashicorp.com/client-cert: "/vault/tls/client.crt"\n        vault.hashicorp.com/client-key: "/vault/tls/client.key"\n        vault.hashicorp.com/tls-secret: "vault-tls-client"\nEOF\n'})}),"\n",(0,a.jsx)(n.p,{children:"Next, apply the patch:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'kubectl patch deployment <MY DEPLOYMENT> --patch "$(cat patch.yaml)"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The pod should now be rescheduled with additional containers. The pod can be inspected\nusing the ",(0,a.jsx)(n.code,{children:"kubectl describe"})," command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl describe pod <name of pod>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"deployments-statefulsets-etc",children:"Deployments, StatefulSets, etc."}),"\n",(0,a.jsx)(n.p,{children:"The annotations for configuring Vault Agent injection must be on the pod\nspecification. Since higher level resources such as Deployments wrap pod\nspecification templates, Vault Agent Injector can be used with all of these\nhigher level constructs, too."}),"\n",(0,a.jsx)(n.p,{children:"An example Deployment below shows how to enable Vault Agent injection:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-example\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-example-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app-example\n  template:\n    metadata:\n      labels:\n        app: app-example\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/agent-inject-secret-db-creds: 'database/creds/db-app'\n        vault.hashicorp.com/agent-inject-template-db-creds: |\n          {{- with secret \"database/creds/db-app\" -}}\n          postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/appdb?sslmode=disable\n          {{- end }}\n        vault.hashicorp.com/role: 'db-app'\n        vault.hashicorp.com/ca-cert: '/vault/tls/ca.crt'\n        vault.hashicorp.com/client-cert: '/vault/tls/client.crt'\n        vault.hashicorp.com/client-key: '/vault/tls/client.key'\n        vault.hashicorp.com/tls-secret: 'vault-tls-client'\n    spec:\n      containers:\n        - name: app\n          image: 'app:1.0.0'\n      serviceAccountName: app-example\n"})}),"\n",(0,a.jsx)(n.h2,{id:"configmap-example",children:"ConfigMap example"}),"\n",(0,a.jsxs)(n.p,{children:["The following example creates a deployment that mounts a Kubernetes ConfigMap\ncontaining Vault Agent configuration files. For a complete list of the Vault\nAgent configuration settings, ",(0,a.jsx)(n.a,{href:"/docs/agent-and-proxy/agent/template#vault-agent-templates",children:"see the Agent documentation"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-example\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-example-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app-example\n  template:\n    metadata:\n      labels:\n        app: app-example\n      annotations:\n        vault.hashicorp.com/agent-inject: \'true\'\n        vault.hashicorp.com/agent-configmap: \'my-configmap\'\n        vault.hashicorp.com/tls-secret: \'vault-tls-client\'\n    spec:\n      containers:\n        - name: app\n          image: \'app:1.0.0\'\n      serviceAccountName: app-example\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\ndata:\n  config.hcl: |\n    "auto_auth" = {\n      "method" = {\n        "config" = {\n          "role" = "db-app"\n        }\n        "type" = "kubernetes"\n      }\n\n      "sink" = {\n        "config" = {\n          "path" = "/home/vault/.token"\n        }\n\n        "type" = "file"\n      }\n    }\n\n    "exit_after_auth" = false\n    "pid_file" = "/home/vault/.pid"\n\n    "template" = {\n      "contents" = "{{- with secret \\"database/creds/db-app\\" -}}postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/mydb?sslmode=disable{{- end }}"\n      "destination" = "/vault/secrets/db-creds"\n    }\n\n    "vault" = {\n      "address" = "https://vault.demo.svc.cluster.local:8200"\n      "ca_cert" = "/vault/tls/ca.crt"\n      "client_cert" = "/vault/tls/client.crt"\n      "client_key" = "/vault/tls/client.key"\n    }\n  config-init.hcl: |\n    "auto_auth" = {\n      "method" = {\n        "config" = {\n          "role" = "db-app"\n        }\n        "type" = "kubernetes"\n      }\n\n      "sink" = {\n        "config" = {\n          "path" = "/home/vault/.token"\n        }\n\n        "type" = "file"\n      }\n    }\n\n    "exit_after_auth" = true\n    "pid_file" = "/home/vault/.pid"\n\n    "template" = {\n      "contents" = "{{- with secret \\"database/creds/db-app\\" -}}postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/mydb?sslmode=disable{{- end }}"\n      "destination" = "/vault/secrets/db-creds"\n    }\n\n    "vault" = {\n      "address" = "https://vault.demo.svc.cluster.local:8200"\n      "ca_cert" = "/vault/tls/ca.crt"\n      "client_cert" = "/vault/tls/client.crt"\n      "client_key" = "/vault/tls/client.key"\n    }\n'})}),"\n",(0,a.jsx)(n.h2,{id:"environment-variable-example",children:"Environment variable example"}),"\n",(0,a.jsx)(n.p,{children:"The following example demonstrates how templates can be used to create environment\nvariables. A template should be created that exports a Vault secret as an environment\nvariable and the application container should source those files during startup."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-deployment\n  labels:\n    app: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/role: 'web'\n        vault.hashicorp.com/agent-inject-secret-config: 'secret/data/web'\n        # Environment variable export template\n        vault.hashicorp.com/agent-inject-template-config: |\n          {{- with secret \"secret/data/web\" -}}\n            export api_key=\"{{ .Data.data.payments_api_key }}\"\n          {{- end }}\n    spec:\n      serviceAccountName: web\n      containers:\n        - name: web\n          image: alpine:latest\n          command:\n            ['sh', '-c']\n          args:\n            ['source /vault/secrets/config && <entrypoint script>']\n          ports:\n            - containerPort: 9090\n"})}),"\n",(0,a.jsx)(n.h2,{id:"approle-authentication",children:"AppRole authentication"}),"\n",(0,a.jsx)(n.p,{children:"The following example demonstrates how the AppRole authentication method can be used by\nVault Agent for retrieving secrets. A Kubernetes secret containing the AppRole secret ID\nand role ID should be created first."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-deployment\n  labels:\n    app: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/agent-extra-secret: 'approle-example'\n        vault.hashicorp.com/auth-type: 'approle'\n        vault.hashicorp.com/auth-path: 'auth/approle'\n        vault.hashicorp.com/auth-config-role-id-file-path: '/vault/custom/role-id'\n        vault.hashicorp.com/auth-config-secret-id-file-path: '/vault/custom/secret-id'\n        vault.hashicorp.com/agent-inject-secret-db-creds: 'database/creds/db-app'\n        vault.hashicorp.com/agent-inject-template-db-creds: |\n          {{- with secret \"database/creds/db-app\" -}}\n          postgres://{{ .Data.username }}:{{ .Data.password }}@postgres.postgres.svc:5432/wizard?sslmode=disable\n          {{- end }}\n        vault.hashicorp.com/role: 'my-role'\n        vault.hashicorp.com/tls-secret: 'vault-tls'\n        vault.hashicorp.com/ca-cert: '/vault/tls/ca.crt'\n    spec:\n      serviceAccountName: web\n      containers:\n        - name: web\n          image: alpine:latest\n          args:\n            ['sh', '-c', 'source /vault/secrets/config && <entrypoint script>']\n          ports:\n            - containerPort: 9090\n"})}),"\n",(0,a.jsx)(n.h2,{id:"pki-cert-example",children:"PKI cert example"}),"\n",(0,a.jsxs)(n.p,{children:["The following example demonstrates how to use the ",(0,a.jsxs)(n.a,{href:"https://github.com/hashicorp/consul-template/blob/main/docs/templating-language.md#pkicert",children:[(0,a.jsx)(n.code,{children:"pkiCert"})," function"]})," and\n",(0,a.jsxs)(n.a,{href:"https://github.com/hashicorp/consul-template/blob/main/docs/templating-language.md#writeToFile",children:[(0,a.jsx)(n.code,{children:"writeToFile"})," function"]})," from consul-template to create two files\nfrom a template: one for the certificate and CA (",(0,a.jsx)(n.code,{children:"cert.pem"}),") and one for the key\n(",(0,a.jsx)(n.code,{children:"cert.key"}),") generated by ",(0,a.jsx)(n.a,{href:"/docs/secrets/pki",children:"Vault's PKI Secrets Engine"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-deployment\n  labels:\n    app: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n      annotations:\n        vault.hashicorp.com/agent-inject: \'true\'\n        vault.hashicorp.com/role: \'web\'\n        vault.hashicorp.com/agent-inject-secret-certs: \'pki/issue/cert\'\n        vault.hashicorp.com/agent-inject-template-certs: |\n          {{- with pkiCert "pki/issue/cert" "common_name=test.example.com" "ttl=2h" -}}\n          {{ .Cert }}{{ .CA }}{{ .Key }}\n          {{ .Key | writeToFile "/vault/secrets/cert.key" "vault" "vault" "0644" }}\n          {{ .CA | writeToFile "/vault/secrets/cert.pem" "vault" "vault" "0644" }}\n          {{ .Cert | writeToFile "/vault/secrets/cert.pem" "vault" "vault" "0644" "append" }}\n          {{- end -}}\n    spec:\n      serviceAccountName: web\n      containers:\n        - name: web\n          image: nginx\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(96540);const s={},c=a.createContext(s);function o(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);