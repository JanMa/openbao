"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8539],{34556:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>l,default:()=>x,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var s=r(74848),n=r(28453);const i={layout:"docs",page_title:"Telemetry reference: Raft metrics",description:"Technical reference for integrated storage telemetry values."},l="Raft telemetry",d={id:"internals/telemetry/metrics/raft",title:"Raft telemetry",description:"Technical reference for integrated storage telemetry values.",source:"@site/content/docs/internals/telemetry/metrics/raft.mdx",sourceDirName:"internals/telemetry/metrics",slug:"/internals/telemetry/metrics/raft",permalink:"/openbao/docs/internals/telemetry/metrics/raft",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/internals/telemetry/metrics/raft.mdx",tags:[],version:"current",frontMatter:{layout:"docs",page_title:"Telemetry reference: Raft metrics",description:"Technical reference for integrated storage telemetry values."},sidebar:"docs",previous:{title:"Policy telemetry",permalink:"/openbao/docs/internals/telemetry/metrics/policy"},next:{title:"Secrets telemetry",permalink:"/openbao/docs/internals/telemetry/metrics/secrets"}},h={},c=[{value:"Default metrics",id:"default-metrics",level:2},{value:"Autopilot metrics",id:"autopilot-metrics",level:2},{value:"Leadership change metrics",id:"leadership-change-metrics",level:2},{value:"Raft replication metrics",id:"raft-replication-metrics",level:2},{value:"Storage metrics",id:"storage-metrics",level:2}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"raft-telemetry",children:"Raft telemetry"}),"\n",(0,s.jsxs)(t.p,{children:["Raft telemetry provides information on\nOpenBao ",(0,s.jsx)(t.a,{href:"/docs/configuration/storage/raft",children:"integrated storage"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"default-metrics",children:"Default metrics"}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.apply ((#vault-raft-apply))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of transactions in the configured interval"})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"vault.raft.apply"})," metric is generally a good indicator of the write load\non your raft internal storage."]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.barrier ((#vault-raft-barrier))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of times the node started the barrier"})]})})]}),"\n",(0,s.jsx)(t.p,{children:"A node starts the barrier by issuing a blocking call when it wants to ensure\nthat all pending operations that need to be applied to the finite state machine\nare properly queued."}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.candidate.electSelf ((#vault-raft-candidate-electself))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required for a node to send a vote request to a peer"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.commitNumLogs ((#vault-raft-commitnumlogs))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of logs processed for application to the finite state machine in a single batch"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.commitTime ((#vault-raft-committime))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to commit a new entry to the raft log on the leader node"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.compactLogs ((#vault-raft-compactlogs))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to trim unnecessary logs"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.fsm.apply ((#vault-raft-fsm-apply))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of logs committed by the finite state machine since the last interval"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.fsm.applyBatch ((#vault-raft-fsm-applybatch))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required by the finite state machine to apply the most recent batch of logs"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.fsm.applyBatchNum ((#vault-raft-fsm-applybatchnum))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of logs applied in the most recent batch"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.fsm.enqueue ((#vault-raft-fsm-enqueue))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to queue up a batch of logs for the finite state machine to apply"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.fsm.restore ((#vault-raft-fsm-restore))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required by the finite state machine to complete a restore operation from a snapshot"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.fsm.snapshot ((#vault-raft-fsm-snapshot))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required by the finite state machine to record state information for the current snapshot"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.fsm.store_config ((#vault-raft-fsm-store_config))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to store the most recent raft configuration"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.get ((#vault-raft-get))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to retrieve an entry from underlying storage"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.list ((#vault-raft-list))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to retrieve a list of keys from underlying storage"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.peers ((#vault-raft-peers))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"guage"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"The number of peers in the raft cluster configuration"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.restore ((#vault-raft-restore))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of times that the node performed a restore operation"})]})})]}),"\n",(0,s.jsx)(t.p,{children:"In the context of raft storage, a restore operation refers to the process where\nraft consumes an external snapshot to restore its state."}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.restoreUserSnapshot ((#vault-raft-restoreusersnapshot))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to restore the finite state machine from a user snapshot"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.rpc.appendEntries ((#vault-raft-rpc-appendentries))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsxs)(t.td,{children:["Time required to process a remote ",(0,s.jsx)(t.code,{children:"appendEntries"})," call from a node"]})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.rpc.appendEntries.processLogs ((#vault-raft-rpc-appendentries-processlogs))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to completely process the outstanding logs for the given node"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.rpc.appendEntries.storeLogs ((#vault-raft-rpc-appendentries-storelogs))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to record any outstanding logs since the last request to append entries for the given node"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.rpc.installSnapshot ((#vault-raft-rpc-installsnapshot))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsxs)(t.td,{children:["Time required to process an ",(0,s.jsx)(t.code,{children:"installSnapshot"})," RPC call"]})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["Only nodes currently in the ",(0,s.jsx)(t.code,{children:"follower"})," state report\n",(0,s.jsx)(t.code,{children:"vault.raft.rpc.installSnapshot"})," metrics."]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.rpc.processHeartbeat ((#vault-raft-rpc-processheartbeat))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to process a heartbeat request"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.rpc.requestVote ((#vault-raft-rpc-requestvote))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsxs)(t.td,{children:["Time required to complete a ",(0,s.jsx)(t.code,{children:"requestVote"})," call"]})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.snapshot.create ((#vault-raft-snapshot-create))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to capture a new snapshot"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.snapshot.persist ((#vault-raft-snapshot-persist))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to record snapshot meta information to disk while taking snapshots"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.snapshot.takeSnapshot ((#vault-raft-snapshot-takesnapshot))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Total time required to create and persist the current snapshot"})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["In most cases, ",(0,s.jsx)(t.code,{children:"vault.raft.snapshot.takeSnapshot"})," is approximately equal to\n",(0,s.jsx)(t.code,{children:"vault.raft.snapshot.create +  vault.raft.snapshot.persist"}),"."]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.state.candidate ((#vault-raft-state-candidate))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of times the raft server initiated an election"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.state.follower ((#vault-raft-state-follower))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of times in the configured interval that the raft server became a follower"})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["Nodes transition to ",(0,s.jsx)(t.code,{children:"follower"})," state under the following conditions:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"when the node joins the cluster"}),"\n",(0,s.jsx)(t.li,{children:"when a leader is elected, but the node was not elected leader"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.state.leader ((#vault-raft-state-leader))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of times the raft server became a leader"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.transition.heartbeat_timeout ((#vault-raft-transition-heartbeat_timeout))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:["Number of times that the node transitioned to ",(0,s.jsx)(t.code,{children:"candidate"})," state after not receiving a heartbeat message from the last known leader"]})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.transition.leader_lease_timeout ((#vault-raft-transition-leader_lease_timeout))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"The number of times the leader could not contact a quorum of nodes and therefore stepped down"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.verify_leader ((#vault-raft-verify_leader))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of times in the configured interval that the node confirmed it is still the leader"})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"autopilot-metrics",children:"Autopilot metrics"}),"\n",'<Note heading="Metrics only apply to the active node">\n  Autopilot only runs on the active node, so autopilot metrics are only\n  captured for the current active node.\n</Note>',"\n",(0,s.jsx)(t.h3,{children:"vault.autopilot.failure_tolerance ((#vault-autopilot-failure_tolerance))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"nodes"}),(0,s.jsx)(t.td,{children:"The number of healthy nodes in excess of quorum"})]})})]}),"\n",(0,s.jsx)(t.p,{children:"The failure tolerance indicates how many currently healthy nodes can fail without losing quorum. "}),"\n",(0,s.jsx)(t.h3,{children:"vault.autopilot.healthy ((#vault-autopilot-healthy))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsx)(t.td,{children:"Indicates whether all nodes are healthy"})]})})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A value of ",(0,s.jsx)(t.code,{children:"1"})," on the gauge means that Autopilot deems all nodes healthy."]}),"\n",(0,s.jsxs)(t.li,{children:["A value of ",(0,s.jsx)(t.code,{children:"0"})," on the gauge means that Autopilot deems at least 1 node\nunhealthy."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{children:"vault.autopilot.node.healthy ((#vault-autopilot-node-healthy))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"boolean"}),(0,s.jsx)(t.td,{children:"Indicates whether the active node is healthy"})]})})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A value of ",(0,s.jsx)(t.code,{children:"1"})," on the gauge means that Autopilot deems the node indicated by\n",(0,s.jsx)(t.code,{children:"node_id"})," is healthy."]}),"\n",(0,s.jsxs)(t.li,{children:["A value of ",(0,s.jsx)(t.code,{children:"0"})," on the gauge means that Autopilot cannot communicate with the\nnode indicated by ",(0,s.jsx)(t.code,{children:"node_id"}),", or deems the node unhealthy."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"leadership-change-metrics",children:"Leadership change metrics"}),"\n",(0,s.jsx)(t.p,{children:"Leadership change metrics indicate the overall performance of the integrated\nstorage on raft servers and the network connection between raft nodes."}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.leader.dispatchLog ((#vault-raft-leader-dispatchlog))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required for the leader node to write a log entry to disk"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.leader.dispatchNumLogs ((#vault-raft-leader-dispatchnumlogs))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of logs committed to disk in the most recent batch"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.leader.lastContact ((#vault-raft-leader-lastcontact))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time since the leader was last able to contact the follower nodes when checking its leader lease"})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"raft-replication-metrics",children:"Raft replication metrics"}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.replication.appendEntries.log ((#vault-raft-replication-appendentries-log))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of logs replicated to a node to establish parity with leader logs"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.replication.appendEntries.rpc ((#vault-raft-replication-appendentries-rpc))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsxs)(t.td,{children:["Time required to replicate leader node log entries to all follower nodes with ",(0,s.jsx)(t.code,{children:"appendEntries"})]})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.replication.heartbeat ((#vault-raft-replication-heartbeat))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsxs)(t.td,{children:["Time required to invoke ",(0,s.jsx)(t.code,{children:"appendEntries"})," on a peer so the peer does not time out"]})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft.replication.installSnapshot ((#vault-raft-replication-installsnapshot))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsxs)(t.td,{children:["Time required to process an ",(0,s.jsx)(t.code,{children:"installSnapshot"})," RPC call"]})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["Only nodes currently in the ",(0,s.jsx)(t.code,{children:"follower"})," state report\n",(0,s.jsx)(t.code,{children:"vault.raft.replication.installSnapshot"})," metrics."]}),"\n",(0,s.jsx)(t.h2,{id:"storage-metrics",children:"Storage metrics"}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.cursor.count ((#vault-raft_storage-bolt-cursor-count))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of cursors created in the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.freelist.allocated_bytes ((#vault-raft_storage-bolt-freelist-allocated_bytes))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"bytes"}),(0,s.jsx)(t.td,{children:"Total space allocated for the freelist for the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.freelist.free_pages ((#vault-raft_storage-bolt-freelist-free_pages))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of free pages in the freelist for the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.freelist.pending_pages ((#vault-raft_storage-bolt-freelist-pending_pages))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of pending pages in the freelist for the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.freelist.used_bytes ((#vault-raft_storage-bolt-freelist-used_bytes))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"bytes"}),(0,s.jsx)(t.td,{children:"Total space used by the freelist for the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.node.count ((#vault-raft_storage-bolt-node-count))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of node allocations for the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.node.dereferences ((#vault-raft_storage-bolt-node-dereferences))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Total number of node dereferences by the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.page.bytes_allocated ((#vault-raft_storage-bolt-page-bytes_allocated))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"bytes"}),(0,s.jsx)(t.td,{children:"Total space allocated to the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.page.count ((#vault-raft_storage-bolt-page-count))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of page allocations in the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.rebalance.count ((#vault-raft_storage-bolt-rebalance-count))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of node rebalances performed by the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.rebalance.time ((#vault-raft_storage-bolt-rebalance-time))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required by the Bolt database to rebalance nodes"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.spill.count ((#vault-raft_storage-bolt-spill-count))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of nodes spilled by the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.spill.time ((#vault-raft_storage-bolt-spill-time))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Total time spent spilling by the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.split.count ((#vault-raft_storage-bolt-split-count))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of nodes split by the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.transaction.currently_open_read_transactions ((#vault-raft_storage-bolt-transaction-currently_open_read_transactions))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of in-process read transactions for the Bolt DB"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.transaction.started_read_transactions ((#vault-raft_storage-bolt-transaction-started_read_transactions))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of read transactions started by the Bolt DB"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.write.count ((#vault-raft_storage-bolt-write-count))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of writes performed by the Bolt database"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.bolt.write.time ((#vault-raft_storage-bolt-write-time))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"counter"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Total cumulative time the Bolt database has spent writing to disk."})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.follower.applied_index_delta ((#vault-raft_storage-follower-applied_index_delta))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"The difference between the index applied by the leader and the index applied by the follower as reported by echoes"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.follower.last_heartbeat_ms ((#vault-raft_storage-follower-last_heartbeat_ms))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time since the follower last received a heartbeat request"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.stats.applied_index ((#vault-raft_storage-stats-applied_index))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsxs)(t.td,{children:["Highest index of raft log last applied to the finite state machine or added to ",(0,s.jsx)(t.code,{children:"fsm_pending queue"})]})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.stats.commit_index ((#vault-raft_storage-stats-commit_index))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Index of the last raft log committed to disk on the node"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft_storage.stats.fsm_pending ((#vault-raft_storage-stats-fsm_pending))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"gauge"}),(0,s.jsx)(t.td,{children:"number"}),(0,s.jsx)(t.td,{children:"Number of raft logs queued by the node for the finite state machine to apply"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft-storage.delete ((#vault-raft_storage-delete))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to insert log entry to delete path"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft-storage.entry_size ((#vault-raft_storage-entry_size))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"summary"}),(0,s.jsx)(t.td,{children:"bytes"}),(0,s.jsx)(t.td,{children:"The total size of a raft entry during log application"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft-storage.get ((#vault-raft_storage-get))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to retrieve a value for the given path from the finite state machine"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft-storage.list ((#vault-raft_storage-list))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to list all entries under the prefix from the finite state machine"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft-storage.put ((#vault-raft_storage-put))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to insert a log entry to the persist path"})]})})]}),"\n",(0,s.jsx)(t.h3,{children:"vault.raft-storage.transaction ((#vault-raft_storage-transaction))"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric type"}),(0,s.jsx)(t.th,{children:"Value"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"timer"}),(0,s.jsx)(t.td,{children:"ms"}),(0,s.jsx)(t.td,{children:"Time required to insert operations into a single log"})]})})]})]})}function x(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>d});var s=r(96540);const n={},i=s.createContext(n);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);