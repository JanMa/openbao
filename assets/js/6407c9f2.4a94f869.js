"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7086],{74496:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=t(74848),i=t(28453);const a={layout:"docs",page_title:"Policies",description:"Policies are how authorization is done in OpenBao, allowing you to restrict which parts of OpenBao a user can access."},r="Policies",o={id:"concepts/policies",title:"Policies",description:"Policies are how authorization is done in OpenBao, allowing you to restrict which parts of OpenBao a user can access.",source:"@site/content/docs/concepts/policies.mdx",sourceDirName:"concepts",slug:"/concepts/policies",permalink:"/openbao/docs/concepts/policies",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/concepts/policies.mdx",tags:[],version:"current",frontMatter:{layout:"docs",page_title:"Policies",description:"Policies are how authorization is done in OpenBao, allowing you to restrict which parts of OpenBao a user can access."},sidebar:"docs",previous:{title:"Response wrapping",permalink:"/openbao/docs/concepts/response-wrapping"},next:{title:"Password policies",permalink:"/openbao/docs/concepts/password-policies"}},l={},c=[{value:"Policy-authorization workflow",id:"policy-authorization-workflow",level:2},{value:"Policy syntax",id:"policy-syntax",level:2},{value:"Capabilities",id:"capabilities",level:3},{value:"Templated policies",id:"templated-policies",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3},{value:"Fine-grained control",id:"fine-grained-control",level:2},{value:"Parameter constraints",id:"parameter-constraints",level:3},{value:"Parameter constraints limitations",id:"parameter-constraints-limitations",level:4},{value:"Default values",id:"default-values",level:5},{value:"Globbing",id:"globbing",level:5},{value:"Required response wrapping TTLs",id:"required-response-wrapping-ttls",level:3},{value:"Built-in policies",id:"built-in-policies",level:2},{value:"Default policy",id:"default-policy",level:3},{value:"Root policy",id:"root-policy",level:3},{value:"Managing policies",id:"managing-policies",level:2},{value:"Listing policies",id:"listing-policies",level:3},{value:"Creating policies",id:"creating-policies",level:3},{value:"Updating policies",id:"updating-policies",level:3},{value:"Deleting policies",id:"deleting-policies",level:3},{value:"Associating policies",id:"associating-policies",level:2},{value:"Root protected API endpoints",id:"root-protected-api-endpoints",level:2},{value:"Tokens",id:"tokens",level:3},{value:"Tutorial",id:"tutorial",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"policies",children:"Policies"}),"\n",(0,s.jsx)(n.p,{children:"Everything in OpenBao is path-based, and policies are no exception. Policies\nprovide a declarative way to grant or forbid access to certain paths and\noperations in OpenBao. This section discusses policy workflows and syntaxes."}),"\n",(0,s.jsxs)(n.p,{children:["Policies are ",(0,s.jsx)(n.strong,{children:"deny by default"}),", so an empty policy grants no permission in the\nsystem."]}),"\n",(0,s.jsx)(n.h2,{id:"policy-authorization-workflow",children:"Policy-authorization workflow"}),"\n",(0,s.jsxs)(n.p,{children:["Before a human or machine can gain access, an administrator must configure OpenBao\nwith an ",(0,s.jsx)(n.a,{href:"/docs/concepts/auth",children:"auth method"}),". Authentication is\nthe process by which human or machine-supplied information is verified against\nan internal or external system."]}),"\n",(0,s.jsx)(n.p,{children:"Consider the following diagram, which illustrates the steps a security team\nwould take to configure OpenBao to authenticate using a corporate LDAP or\nActiveDirectory installation. Even though this example uses LDAP, the concept\napplies to all auth methods."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(40216).A+"",children:(0,s.jsx)(n.img,{alt:"OpenBao Auth Workflow",src:t(29185).A+"",width:"669",height:"497"})})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The security team configures OpenBao to connect to an auth method.\nThis configuration varies by auth method. In the case of LDAP, OpenBao\nneeds to know the address of the LDAP server and whether to connect using TLS.\nIt is important to note that OpenBao does not store a copy of the LDAP database -\nOpenBao will delegate the authentication to the auth method."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The security team authors a policy (or uses an existing policy) which grants\naccess to paths in OpenBao. Policies are written in HCL in your editor of\npreference and saved to disk."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The policy's contents are uploaded and stored in OpenBao and referenced by name.\nYou can think of the policy's name as a pointer or symlink to its set of rules."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Most importantly, the security team maps data in the auth method to a policy.\nFor example, the security team might create mappings like:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:'Members of the OU group "dev" map to the OpenBao policy named "readonly-dev".'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"or"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:'Members of the OU group "ops" map to the OpenBao policies "admin" and "auditor".'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now OpenBao has an internal mapping between a backend authentication system and\ninternal policy. When a user authenticates to OpenBao, the actual authentication\nis delegated to the auth method. As a user, the flow looks like:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(43036).A+"",children:(0,s.jsx)(n.img,{alt:"OpenBao Auth Workflow",src:t(27985).A+"",width:"669",height:"497"})})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"A user attempts to authenticate to OpenBao using their LDAP credentials,\nproviding OpenBao with their LDAP username and password."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"OpenBao establishes a connection to LDAP and asks the LDAP server to verify the\ngiven credentials. Assuming this is successful, the LDAP server returns the\ninformation about the user, including the OU groups."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"OpenBao maps the result from the LDAP server to policies inside OpenBao using the\nmapping configured by the security team in the previous section. OpenBao then\ngenerates a token and attaches the matching policies."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"OpenBao returns the token to the user. This token has the correct policies\nassigned, as dictated by the mapping configuration that was setup by the\nsecurity team in advance."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The user then uses this OpenBao token for future operations. If the user performs\nthe authentication steps again, they will get a ",(0,s.jsx)(n.em,{children:"new"})," token. The token will have\nthe same permissions, but the actual token will be different. Authenticating a\nsecond time does not invalidate the original token."]}),"\n",(0,s.jsx)(n.h2,{id:"policy-syntax",children:"Policy syntax"}),"\n",(0,s.jsxs)(n.p,{children:["Policies are written in ",(0,s.jsx)(n.a,{href:"https://github.com/hashicorp/hcl",children:"HCL"})," or JSON and describe which paths in OpenBao a\nuser or machine is allowed to access."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is a very simple policy which grants read capabilities to the ",(0,s.jsx)(n.a,{href:"/api-docs/secret/kv/kv-v1",children:"KVv1"})," path\n",(0,s.jsx)(n.code,{children:'"secret/foo"'}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'path "secret/foo" {\n  capabilities = ["read"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["When this policy is assigned to a token, the token can read from ",(0,s.jsx)(n.code,{children:'"secret/foo"'}),".\nHowever, the token cannot update or delete ",(0,s.jsx)(n.code,{children:'"secret/foo"'}),", since the\ncapabilities do not allow it. Because policies are ",(0,s.jsx)(n.strong,{children:"deny by default"}),", the\ntoken would have no other access in OpenBao."]}),"\n",(0,s.jsx)(n.p,{children:"Here is a more detailed policy, and it is documented inline:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This section grants all access on "secret/*". further restrictions can be\n# applied to this broad policy, as shown below.\npath "secret/*" {\n  capabilities = ["create", "read", "update", "patch", "delete", "list"]\n}\n\n# Even though we allowed secret/*, this line explicitly denies\n# secret/super-secret. this takes precedence.\npath "secret/super-secret" {\n  capabilities = ["deny"]\n}\n\n# Policies can also specify allowed, disallowed, and required parameters. here\n# the key "secret/restricted" can only contain "foo" (any value) and "bar" (one\n# of "zip" or "zap").\npath "secret/restricted" {\n  capabilities = ["create"]\n  allowed_parameters = {\n    "foo" = []\n    "bar" = ["zip", "zap"]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Policies use path-based matching to test the set of capabilities against a\nrequest. A policy ",(0,s.jsx)(n.code,{children:"path"})," may specify an exact path to match, or it could specify\na glob pattern which instructs OpenBao to use a prefix match:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Permit reading only "secret/foo". an attached token cannot read "secret/food"\n# or "secret/foo/bar".\npath "secret/foo" {\n  capabilities = ["read"]\n}\n\n# Permit reading everything under "secret/bar". an attached token could read\n# "secret/bar/zip", "secret/bar/zip/zap", but not "secret/bars/zip".\npath "secret/bar/*" {\n  capabilities = ["read"]\n}\n\n# Permit reading everything prefixed with "zip-". an attached token could read\n# "secret/zip-zap" or "secret/zip-zap/zong", but not "secret/zip/zap\npath "secret/zip-*" {\n  capabilities = ["read"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In addition, a ",(0,s.jsx)(n.code,{children:"+"})," can be used to denote any number of characters bounded\nwithin a single path segment:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Permit reading the "teamb" path under any top-level path under secret/\npath "secret/+/teamb" {\n  capabilities = ["read"]\n}\n\n# Permit reading secret/foo/bar/teamb, secret/bar/foo/teamb, etc.\npath "secret/+/+/teamb" {\n  capabilities = ["read"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["OpenBao's architecture is similar to a filesystem. Every action in OpenBao has a\ncorresponding path and capability - even OpenBao's internal core configuration\nendpoints live under the ",(0,s.jsx)(n.code,{children:'"sys/"'})," path. Policies define access to these paths and\ncapabilities, which controls a token's access to credentials in OpenBao."]}),"\n",(0,s.jsxs)(n.p,{children:["~> ",(0,s.jsx)(n.strong,{children:"Note:"})," The policy rules that OpenBao applies are determined by the most-specific match\navailable, using the priority rules described below. This may be an exact match\nor the longest-prefix match of a glob. If the same pattern appears in multiple\npolicies, we take the union of the capabilities. If different patterns appear in\nthe applicable policies, we take only the highest-priority match from those\npolicies."]}),"\n",(0,s.jsxs)(n.p,{children:["This means if you define a policy for ",(0,s.jsx)(n.code,{children:'"secret/foo*"'}),", the policy would\nalso match ",(0,s.jsx)(n.code,{children:'"secret/foobar"'}),". Specifically, when there are potentially multiple\nmatching policy paths, ",(0,s.jsx)(n.code,{children:"P1"})," and ",(0,s.jsx)(n.code,{children:"P2"}),", the following matching criteria is applied:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["If the first wildcard (",(0,s.jsx)(n.code,{children:"+"}),") or glob (",(0,s.jsx)(n.code,{children:"*"}),") occurs earlier in ",(0,s.jsx)(n.code,{children:"P1"}),", ",(0,s.jsx)(n.code,{children:"P1"})," is lower priority"]}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"P1"})," ends in ",(0,s.jsx)(n.code,{children:"*"})," and ",(0,s.jsx)(n.code,{children:"P2"})," doesn't, ",(0,s.jsx)(n.code,{children:"P1"})," is lower priority"]}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"P1"})," has more ",(0,s.jsx)(n.code,{children:"+"})," (wildcard) segments, ",(0,s.jsx)(n.code,{children:"P1"})," is lower priority"]}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"P1"})," is shorter, it is lower priority"]}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"P1"})," is smaller lexicographically, it is lower priority"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For example, given the two paths, ",(0,s.jsx)(n.code,{children:'"secret/*"'})," and ",(0,s.jsx)(n.code,{children:'"secret/+/+/foo/*"'}),", the first\nwildcard appears in the same place, both end in ",(0,s.jsx)(n.code,{children:"*"})," and the latter has two wildcard\nsegments while the former has zero. So we end at rule (3), and give ",(0,s.jsx)(n.code,{children:'"secret/+/+/foo/*"'}),"\n",(0,s.jsx)(n.em,{children:"lower"})," priority."]}),"\n",(0,s.jsxs)(n.p,{children:["!> **Informational:**The glob character referred to in this documentation is the asterisk (",(0,s.jsx)(n.code,{children:"*"}),").\nIt ",(0,s.jsx)(n.em,{children:"is not a regular expression"})," and is only supported ",(0,s.jsx)(n.strong,{children:"as the last character of the path"}),"!"]}),"\n",(0,s.jsxs)(n.p,{children:["When providing ",(0,s.jsx)(n.code,{children:"list"})," capability, it is important to note that since listing\nalways operates on a prefix, policies must operate on a prefix because OpenBao\nwill sanitize request paths to be prefixes."]}),"\n",(0,s.jsx)(n.h3,{id:"capabilities",children:"Capabilities"}),"\n",(0,s.jsx)(n.p,{children:"Each path must define one or more capabilities which provide fine-grained\ncontrol over permitted (or denied) operations. As shown in the examples above,\ncapabilities are always specified as a list of strings, even if there is only\none capability."}),"\n",(0,s.jsxs)(n.p,{children:["To determine the capabilities needed to perform a specific operation, the ",(0,s.jsx)(n.code,{children:"-output-policy"})," flag can be added to the CLI subcommand. For an example, refer to the ",(0,s.jsx)(n.a,{href:"/docs/commands#print-policy-requirements",children:"Print Policy Requirements"})," document section."]}),"\n",(0,s.jsx)(n.p,{children:"The list of capabilities include the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"create"})," (",(0,s.jsx)(n.code,{children:"POST/PUT"}),") - Allows creating data at the given path. Very few\nparts of OpenBao distinguish between ",(0,s.jsx)(n.code,{children:"create"})," and ",(0,s.jsx)(n.code,{children:"update"}),", so most operations\nrequire both ",(0,s.jsx)(n.code,{children:"create"})," and ",(0,s.jsx)(n.code,{children:"update"})," capabilities. Parts of OpenBao that\nprovide such a distinction are noted in documentation."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"read"})," (",(0,s.jsx)(n.code,{children:"GET"}),") - Allows reading the data at the given path."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"update"})," (",(0,s.jsx)(n.code,{children:"POST/PUT"}),") - Allows changing the data at the given path. In most\nparts of OpenBao, this implicitly includes the ability to create the initial\nvalue at the path."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"patch"})," (",(0,s.jsx)(n.code,{children:"PATCH"}),") -  Allows partial updates to the data at a given path."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"delete"})," (",(0,s.jsx)(n.code,{children:"DELETE"}),") - Allows deleting the data at the given path."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"list"})," (",(0,s.jsx)(n.code,{children:"LIST"}),") - Allows listing values at the given path. Note that the\nkeys returned by a ",(0,s.jsx)(n.code,{children:"list"})," operation are ",(0,s.jsx)(n.em,{children:"not"})," filtered by policies. Do not\nencode sensitive information in key names. Not all backends support listing."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In the list above, the associated HTTP verbs are shown in parenthesis next to\nthe capability. When authoring policy, it is usually helpful to look at the HTTP\nAPI documentation for the paths and HTTP verbs and map them back onto\ncapabilities. While the mapping is not strictly 1:1, they are often very\nsimilarly matched."}),"\n",(0,s.jsx)(n.p,{children:"In addition to the standard set, there are some capabilities that do not map to\nHTTP verbs."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"sudo"})," - Allows access to paths that are ",(0,s.jsx)(n.em,{children:"root-protected"}),". Tokens are not\npermitted to interact with these paths unless they have the ",(0,s.jsx)(n.code,{children:"sudo"}),"\ncapability (in addition to the other necessary capabilities for performing\nan operation against that path, such as ",(0,s.jsx)(n.code,{children:"read"})," or ",(0,s.jsx)(n.code,{children:"delete"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, modifying the audit log backends requires a token with ",(0,s.jsx)(n.code,{children:"sudo"}),"\nprivileges."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"deny"})," - Disallows access. This always takes precedence regardless of any\nother defined capabilities, including ",(0,s.jsx)(n.code,{children:"sudo"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["~> ",(0,s.jsx)(n.strong,{children:"Note:"})," Capabilities usually map to the HTTP verb, and not the underlying\naction taken. This can be a common source of confusion. Generating database\ncredentials ",(0,s.jsx)(n.em,{children:"creates"})," database credentials, but the HTTP request is a GET which\ncorresponds to a ",(0,s.jsx)(n.code,{children:"read"})," capability. Thus, to grant access to generate database\ncredentials, the policy would grant ",(0,s.jsx)(n.code,{children:"read"})," access on the appropriate path."]}),"\n",(0,s.jsx)(n.h2,{id:"templated-policies",children:"Templated policies"}),"\n",(0,s.jsxs)(n.p,{children:["The policy syntax allows for doing variable replacement in some policy strings\nwith values available to the token. Currently ",(0,s.jsx)(n.code,{children:"identity"})," information can be\ninjected, and currently the ",(0,s.jsx)(n.code,{children:"path"})," keys in policies allow injection."]}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.entity.id"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"The entity's ID"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.entity.name"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"The entity's name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.entity.metadata.<metadata key>"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Metadata associated with the entity for the given key"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.entity.aliases.<mount accessor>.id"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Entity alias ID for the given mount"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.entity.aliases.<mount accessor>.name"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Entity alias name for the given mount"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.entity.aliases.<mount accessor>.metadata.<metadata key>"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Metadata associated with the alias for the given mount and metadata key"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.entity.aliases.<mount accessor>.custom_metadata.<custom_metadata key>"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Custom metadata associated with the alias for the given mount and custom metadata key"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.groups.ids.<group id>.name"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"The group name for the given group ID"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.groups.names.<group name>.id"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"The group ID for the given group name"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.groups.ids.<group id>.metadata.<metadata key>"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Metadata associated with the group for the given key"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"identity.groups.names.<group name>.metadata.<metadata key>"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Metadata associated with the group for the given key"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"The following policy creates a section of the KVv2 Secret Engine to a specific user"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'path "secret/data/{{identity.entity.id}}/*" {\n  capabilities = ["create", "update", "patch", "read", "delete"]\n}\n\npath "secret/metadata/{{identity.entity.id}}/*" {\n  capabilities = ["list"]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you wanted to create a shared section of KV that is associated with entities that are in a\ngroup."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# In the example below, the group ID maps a group and the path\npath "secret/data/groups/{{identity.groups.ids.fb036ebc-2f62-4124-9503-42aa7A869741.name}}/*" {\n  capabilities = ["create", "update", "patch", "read", "delete"]\n}\n\npath "secret/metadata/groups/{{identity.groups.ids.fb036ebc-2f62-4124-9503-42aa7A869741.name}}/*" {\n  capabilities = ["list"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["~> ",(0,s.jsx)(n.strong,{children:"Note:"})," When developing templated policies, use IDs wherever possible. Each ID is\nunique to the user, whereas names can change over time and can be reused. This\nensures that if a given user or group name is changed, the policy will be\nmapped to the intended entity or group."]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to use the metadata associated with an authentication plugin in your\ntemplates, you will need to get its ",(0,s.jsx)(n.em,{children:"mount accessor"})," and access it via the\n",(0,s.jsx)(n.code,{children:"aliases"})," key."]}),"\n",(0,s.jsx)(n.p,{children:"You can get the mount accessor value using the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shellsession",children:"$> bao auth list\nPath           Type          Accessor                    Description\n----           ----          --------                    -----------\nkubernetes/    kubernetes    auth_kubernetes_xxxx        n/a\ntoken/         token         auth_token_yyyy             token based credentials\n"})}),"\n",(0,s.jsx)(n.p,{children:"The following templated policy allow to read the path associated with the\nKubernetes service account namespace of the identity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'path "secret/data/{{identity.entity.aliases.auth_kubernetes_xxxx.metadata.service_account_namespace}}/*" {\n  capabilities = ["read"]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"fine-grained-control",children:"Fine-grained control"}),"\n",(0,s.jsx)(n.p,{children:"In addition to the standard set of capabilities, OpenBao offers finer-grained\ncontrol over permissions at a given path. The capabilities associated with a\npath take precedence over permissions on parameters."}),"\n",(0,s.jsx)(n.h3,{id:"parameter-constraints",children:"Parameter constraints"}),"\n",(0,s.jsxs)(n.p,{children:["!> ",(0,s.jsx)(n.strong,{children:"Note:"})," The use of ",(0,s.jsx)(n.a,{href:"/docs/concepts/policies#policy-syntax",children:"globs"})," (",(0,s.jsx)(n.code,{children:"*"}),") may result in ",(0,s.jsx)(n.a,{href:"#parameter-constraints-limitations",children:"surprising or unexpected behavior"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["~> ",(0,s.jsx)(n.strong,{children:"Note:"})," The ",(0,s.jsx)(n.code,{children:"allowed_parameters"}),", ",(0,s.jsx)(n.code,{children:"denied_parameters"}),", and ",(0,s.jsx)(n.code,{children:"required_parameters"})," fields are not supported for policies used with the ",(0,s.jsx)(n.a,{href:"/docs/secrets/kv/kv-v2",children:"version 2 kv secrets engine"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["See the ",(0,s.jsx)(n.a,{href:"/api-docs/secret/kv/kv-v2",children:"API Specification"})," for more information."]}),"\n",(0,s.jsx)(n.p,{children:"Policies can take into account HTTP request parameters to further\nconstrain requests, using the following options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"required_parameters"})," - A list of parameters that must be specified."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This requires the user to create "secret/profile" with a parameter/key named\n# "name" and "id" where kv v1 is enabled at "secret/".\npath "secret/profile" {\n  capabilities = ["create"]\n  required_parameters = ["name", "id"]\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowed_parameters"})," - A list of keys and values that are\npermitted on the given path."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Setting a parameter with a value of the empty list allows the parameter to\ncontain any value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This allows the user to update the password parameter value set on any\n# users configured for userpass auth method. The password value can be\n# anything. However, the user cannot update other parameter values such as\n# token_ttl.\npath "auth/userpass/users/*" {\n  capabilities = ["update"]\n  allowed_parameters = {\n    "password" = []\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["-> ",(0,s.jsx)(n.strong,{children:"Usage example:"})," The ",(0,s.jsx)(n.a,{href:"/tutorials/policies/policy-templating",children:"ACL Policy Path\nTemplating"}),"\ntutorial demonstrates the use of ",(0,s.jsx)(n.code,{children:"allowed_parameters"})," to permit a user to\nupdate the user's password when using the ",(0,s.jsx)(n.a,{href:"/docs/auth/userpass",children:"userpass auth\nmethod"})," to log in with OpenBao."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Setting a parameter with a value of a populated list allows the parameter\nto contain only those values."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This allows the user to create or update an encryption key for transit\n# secrets engine enabled at "transit/". When you do, you can set the\n# "auto_rotate_period" parameter value so that the key gets rotated.\n# However, the rotation period must be "8h", "24h", or "5d". Any other value\n# will result in an error.\npath "transit/keys/*" {\n  capabilities = ["create", "update"]\n  allowed_parameters = {\n    "auto_rotate_period" = ["8h", "24h", "5d"]\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If any keys are specified, all non-specified parameters will be denied\nunless the parameter ",(0,s.jsx)(n.code,{children:'"*"'})," is set to an empty array, which will\nallow all other parameters to be modified. Parameters with specific values\nwill still be restricted to those values."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# When kv v1 secrets engine is enabled at "secret/", this allows the user to\n# create "secret/foo" with a parameter named "bar". The parameter "bar" can\n# only contain the values "zip" or "zap", but any other parameters may be\n# created with any value.\npath "secret/foo" {\n  capabilities = ["create"]\n  allowed_parameters = {\n    "bar" = ["zip", "zap"]\n    "*"   = []\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"denied_parameters"})," - A list of keys and values that are not permitted on the given\npath. Any values specified here take precedence over ",(0,s.jsx)(n.code,{children:"allowed_parameters"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Setting a parameter with a value of the empty list denies any changes to\nthat parameter."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This allows the user to update the userpass auth method\'s user\n# configurations (e.g., "password") but cannot update the "token_policies"\n# and "policies" parameter values.\npath "auth/userpass/users/*" {\n  capabilities = ["update"]\n  denied_parameters = {\n    "token_policies" = []\n    "policies" = []\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Setting a parameter with a value of a populated list denies any parameter\ncontaining those values."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This allows the user to create or update token roles. However, the\n# "allowed_policies" parameter value cannot be "admin", but the user can\n# assign any other policies to the parameter.\npath "auth/token/roles/*" {\n  capabilities = ["create", "update"]\n  denied_parameters = {\n    "allowed_policies" = ["admin"]\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Setting to ",(0,s.jsx)(n.code,{children:'"*"'})," will deny any parameter."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This allows the user to create or update an encryption key for transit\n# secrets engine enabled at "transit/". However, the user cannot set any of\n# the configuration parameters. As a result, the created key will have all\n# parameters set to default values.\npath "transit/keys/*" {\n  capabilities = ["create", "update"]\n  denied_parameters = {\n    "*" = []\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If any parameters are specified, all non-specified parameters are allowed,\nunless ",(0,s.jsx)(n.code,{children:"allowed_parameters"})," is also set, in which case normal rules apply."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Parameter values also support prefix/suffix globbing. Globbing is enabled by\nprepending or appending or prepending a splat (",(0,s.jsx)(n.code,{children:"*"}),") to the value:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Only allow a parameter named "bar" with a value starting with "foo-*".\npath "secret/foo" {\n  capabilities = ["create"]\n  allowed_parameters = {\n    "bar" = ["foo-*"]\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["~> ",(0,s.jsx)(n.strong,{children:"Note:"})," the only value that can be used with the ",(0,s.jsx)(n.code,{children:"*"})," parameter is ",(0,s.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"parameter-constraints-limitations",children:"Parameter constraints limitations"}),"\n",(0,s.jsx)(n.h5,{id:"default-values",children:"Default values"}),"\n",(0,s.jsxs)(n.p,{children:["Evaluation of policies with ",(0,s.jsx)(n.code,{children:"allowed_parameters"}),", ",(0,s.jsx)(n.code,{children:"denied_parameters"}),", and ",(0,s.jsx)(n.code,{children:"required_parameters"})," happens\nwithout consideration of parameters' default values."]}),"\n",(0,s.jsx)(n.p,{children:"Given the following policy:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# The "no_store" parameter cannot be false\npath "secret/foo" {\n  capabilities = ["create"]\n  denied_parameters = {\n    "no_store" = [false, "false"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'The following operation will error, because "no_store" is set to false:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao write secret/foo no_store=false value=bar\n"})}),"\n",(0,s.jsx)(n.p,{children:'Whereas the following operation will succeed, even if the "no_store"\nparameter must be a boolean, and it defaults to false:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'# Succeeds because "no_store=false" isn\'t present in the parameters\n$ bao write secret/foo value=bar\n'})}),"\n",(0,s.jsx)(n.p,{children:'This is because the policy evaluator does not know what the default value is for\nthe "no_store" parameter. All it sees is that the denied parameter isn\'t present\nin the command.'}),"\n",(0,s.jsx)(n.p,{children:'This can be resolved by requiring the "no_store" parameter in your policy:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'path "secret/foo" {\n  capabilities = ["create"]\n  required_parameters = ["no_store"]\n  denied_parameters = {\n    "no_store" = [false, "false"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:'The following command, which previously succeeded, will now fail under the new policy\nbecause there is no "no_store" parameter:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao write secret/foo value=bar\n"})}),"\n",(0,s.jsx)(n.h5,{id:"globbing",children:"Globbing"}),"\n",(0,s.jsx)(n.p,{children:"It's also important to note that the use of globbing may result in surprising\nor unexpected behavior:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This allows the user to create, update, or patch "secret/foo" with a parameter\n# named "bar". the values passed to parameter "bar" must start with "baz/"\n# so values like "baz/quux" are fine. however, values like\n# "baz/quux,wibble,wobble,wubble" would also be accepted. the API that\n# underlies "secret/foo" might allow comma delimited values for the "bar"\n# parameter, and if it did, specifying a value like\n# "baz/quux,wibble,wobble,wubble" would result in 4 different values getting\n# passed along. seeing values like "wibble" or "wobble" getting passed to\n# "secret/foo" might surprise someone that expected the allowed_parameters\n# constraint to only allow values starting with "baz/".\npath "secret/foo" {\n  capabilities = ["create", "update", "patch"]\n  allowed_parameters = {\n    "bar" = ["baz/*"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"required-response-wrapping-ttls",children:"Required response wrapping TTLs"}),"\n",(0,s.jsxs)(n.p,{children:["These parameters can be used to set minimums/maximums on TTLs set by clients\nwhen requesting that a response be\n",(0,s.jsx)(n.a,{href:"/docs/concepts/response-wrapping",children:"wrapped"}),", with a granularity of a\nsecond. These use ",(0,s.jsx)(n.a,{href:"/docs/concepts/duration-format",children:"duration format strings"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In practice, setting a minimum TTL of one second effectively makes response\nwrapping mandatory for a particular path."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"min_wrapping_ttl"})," - The minimum allowed TTL that clients can specify for a\nwrapped response. In practice, setting a minimum TTL of one second\neffectively makes response wrapping mandatory for a particular path. It can\nalso be used to ensure that the TTL is not too low, leading to end targets\nbeing unable to unwrap before the token expires."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"max_wrapping_ttl"})," - The maximum allowed TTL that clients can specify for a\nwrapped response."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# This effectively makes response wrapping mandatory for this path by setting min_wrapping_ttl to 1 second.\n# This also sets this path\'s wrapped response maximum allowed TTL to 90 seconds.\npath "auth/approle/role/my-role/secret-id" {\n    capabilities = ["create", "update"]\n    min_wrapping_ttl = "1s"\n    max_wrapping_ttl = "90s"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If both are specified, the minimum value must be less than the maximum. In\naddition, if paths are merged from different stanzas, the lowest value\nspecified for each is the value that will result, in line with the idea of\nkeeping token lifetimes as short as possible."}),"\n",(0,s.jsx)(n.h2,{id:"built-in-policies",children:"Built-in policies"}),"\n",(0,s.jsxs)(n.p,{children:["OpenBao has two built-in policies: ",(0,s.jsx)(n.code,{children:"default"})," and ",(0,s.jsx)(n.code,{children:"root"}),". This section describes\nthe two built-in policies."]}),"\n",(0,s.jsx)(n.h3,{id:"default-policy",children:"Default policy"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"default"})," policy is a built-in OpenBao policy that cannot be removed. By\ndefault, it is attached to all tokens, but may be explicitly excluded at token\ncreation time by supporting authentication methods."]}),"\n",(0,s.jsxs)(n.p,{children:["The policy contains basic functionality such as the ability for the token to\nlook up data about itself and to use its cubbyhole data. However, OpenBao is not\nprescriptive about its contents. It can be modified to suit your needs; OpenBao\nwill never overwrite your modifications. If you want to stay up-to-date with\nthe latest upstream version of the ",(0,s.jsx)(n.code,{children:"default"})," policy, simply read the contents\nof the policy from an up-to-date ",(0,s.jsx)(n.code,{children:"dev"})," server, and write those contents into\nyour OpenBao's ",(0,s.jsx)(n.code,{children:"default"})," policy."]}),"\n",(0,s.jsx)(n.p,{children:"To view all permissions granted by the default policy on your OpenBao\ninstallation, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao read sys/policy/default\n"})}),"\n",(0,s.jsx)(n.p,{children:"To disable attachment of the default policy:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao token create -no-default-policy\n"})}),"\n",(0,s.jsx)(n.p,{children:"or via the API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ curl \\\n  --request POST \\\n  --header "X-Vault-Token: ..." \\\n  --data \'{"no_default_policy": "true"}\' \\\n  https://openbao.hashicorp.rocks/v1/auth/token/create\n'})}),"\n",(0,s.jsx)(n.h3,{id:"root-policy",children:"Root policy"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"root"})," policy is a built-in OpenBao policy that cannot be modified or removed.\nAny user associated with this policy becomes a root user. A root user can do\n",(0,s.jsx)(n.em,{children:"anything"})," within OpenBao. As such, it is ",(0,s.jsx)(n.strong,{children:"highly recommended"})," that you revoke\nany root tokens before running OpenBao in production."]}),"\n",(0,s.jsx)(n.p,{children:"When an OpenBao server is first initialized, there always exists one root user.\nThis user is used to do the initial configuration and setup of OpenBao. After\nconfigured, the initial root token should be revoked and more strictly\ncontrolled users and authentication should be used."}),"\n",(0,s.jsx)(n.p,{children:"To revoke a root token, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ bao token revoke "<token>"\n'})}),"\n",(0,s.jsx)(n.p,{children:"or via the API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ curl \\\n  --request POST \\\n  --header "X-Vault-Token: ..." \\\n  --data \'{"token": "<token>"}\' \\\n  https://openbao.hashicorp.rocks/v1/auth/token/revoke\n'})}),"\n",(0,s.jsx)(n.p,{children:"For more information, please read:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/tutorials/operations/production-hardening",children:"Production Hardening"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/tutorials/operations/generate-root",children:"Generating a Root Token"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"managing-policies",children:"Managing policies"}),"\n",(0,s.jsx)(n.p,{children:"Policies are authored (written) in your editor of choice. They can be authored\nin HCL or JSON, and the syntax is described in detail above. Once saved,\npolicies must be uploaded to OpenBao before they can be used."}),"\n",(0,s.jsx)(n.h3,{id:"listing-policies",children:"Listing policies"}),"\n",(0,s.jsx)(n.p,{children:"To list all registered policies in OpenBao:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao read sys/policy\n"})}),"\n",(0,s.jsx)(n.p,{children:"or via the API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ curl \\\n  --header "X-Vault-Token: ..." \\\n  https://openbao.hashicorp.rocks/v1/sys/policy\n'})}),"\n",(0,s.jsxs)(n.p,{children:["~> ",(0,s.jsx)(n.strong,{children:"Note:"})," You may also see the CLI command ",(0,s.jsx)(n.code,{children:"bao policies"}),". This is a convenience\nwrapper around reading the sys endpoint directly. It provides the same\nfunctionality but formats the output in a special manner."]}),"\n",(0,s.jsx)(n.h3,{id:"creating-policies",children:"Creating policies"}),"\n",(0,s.jsx)(n.p,{children:"Policies may be created (uploaded) via the CLI or via the API. To create a new\npolicy in OpenBao:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao policy write policy-name policy-file.hcl\n"})}),"\n",(0,s.jsx)(n.p,{children:"or via the API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ curl \\\n  --request POST \\\n  --header "X-Vault-Token: ..." \\\n  --data \'{"policy":"path \\"...\\" {...} "}\' \\\n  https://openbao.hashicorp.rocks/v1/sys/policy/policy-name\n'})}),"\n",(0,s.jsx)(n.p,{children:'In both examples, the name of the policy is "policy-name". You can think of this\nname as a pointer or symlink to the policy ACLs. Tokens are attached policies by\nname, which are then mapped to the set of rules corresponding to that name.'}),"\n",(0,s.jsx)(n.h3,{id:"updating-policies",children:"Updating policies"}),"\n",(0,s.jsx)(n.p,{children:"Existing policies may be updated to change permissions via the CLI or via the\nAPI. To update an existing policy in OpenBao, follow the same steps as creating a\npolicy, but use an existing policy name:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao write sys/policy/my-existing-policy policy=@updated-policy.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"or via the API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ curl \\\n  --request POST \\\n  --header "X-Vault-Token: ..." \\\n  --data \'{"policy":"path \\"...\\" {...} "}\' \\\n  https://openbao.hashicorp.rocks/v1/sys/policy/my-existing-policy\n'})}),"\n",(0,s.jsx)(n.h3,{id:"deleting-policies",children:"Deleting policies"}),"\n",(0,s.jsx)(n.p,{children:"Existing policies may be deleted via the CLI or API. To delete a policy:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao delete sys/policy/policy-name\n"})}),"\n",(0,s.jsx)(n.p,{children:"or via the API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ curl \\\n  --request DELETE \\\n  --header "X-Vault-Token: ..." \\\n  https://openbao.hashicorp.rocks/v1/sys/policy/policy-name\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is an idempotent operation. OpenBao will not return an error when deleting a\npolicy that does not exist."}),"\n",(0,s.jsx)(n.h2,{id:"associating-policies",children:"Associating policies"}),"\n",(0,s.jsx)(n.p,{children:"OpenBao can automatically associate a set of policies to a token based on an\nauthorization. This configuration varies significantly between authentication\nbackends. For simplicity, this example will use OpenBao's built-in userpass\nauth method."}),"\n",(0,s.jsx)(n.p,{children:"An OpenBao administrator or someone from the security team would create the user in\nOpenBao with a list of associated policies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ bao write auth/userpass/users/sethvargo \\\n    password="s3cr3t!" \\\n    policies="dev-readonly,logs"\n'})}),"\n",(0,s.jsx)(n.p,{children:"This creates an authentication mapping to the policy such that, when the user\nauthenticates successfully to OpenBao, they will be given a token which has the list\nof policies attached."}),"\n",(0,s.jsx)(n.p,{children:"The user wishing to authenticate would run"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:'$ bao login -method="userpass" username="sethvargo"\nPassword (will be hidden): ...\n'})}),"\n",(0,s.jsx)(n.p,{children:"If the provided information is correct, OpenBao will generate a token, assign the\nlist of configured policies to the token, and return that token to the\nauthenticated user."}),"\n",(0,s.jsx)(n.h2,{id:"root-protected-api-endpoints",children:"Root protected API endpoints"}),"\n",(0,s.jsxs)(n.p,{children:["~> ",(0,s.jsx)(n.strong,{children:"Note:"})," OpenBao treats the HTTP POST and PUT verbs as equivalent, so for each mention\nof POST in the table above, PUT may also be used. OpenBao uses the non-standard LIST HTTP\nverb, but also allows list requests to be made using the GET verb along with ",(0,s.jsx)(n.code,{children:"?list=true"}),"\nas a query parameter, so for each mention of LIST in the table above, GET with ",(0,s.jsx)(n.code,{children:"?list=true"}),"\nmay also be used."]}),"\n",(0,s.jsxs)(n.p,{children:["The following paths requires a root token or ",(0,s.jsx)(n.code,{children:"sudo"})," capability in the policy:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Path"}),(0,s.jsx)(n.th,{children:"HTTP verb"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/auth/token#list-accessors",children:"auth/token/accessors"})}),(0,s.jsx)(n.td,{children:"LIST"}),(0,s.jsx)(n.td,{children:"List token accessors for all current OpenBao service tokens"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/auth/token#create-token",children:"auth/token/create"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsxs)(n.td,{children:["Create a periodic or an orphan token (",(0,s.jsx)(n.code,{children:"period"})," or ",(0,s.jsx)(n.code,{children:"no_parent"}),") option"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/secret/pki#delete-all-issuers-and-keys",children:"pki/root"})}),(0,s.jsx)(n.td,{children:"DELETE"}),(0,s.jsxs)(n.td,{children:["Delete the current CA key (",(0,s.jsx)(n.a,{href:"/docs/secrets/pki",children:"pki secrets engine"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/secret/pki#sign-self-issued",children:"pki/root/sign-self-issued"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsxs)(n.td,{children:["Use the configured CA certificate to sign a self-issued certificate (",(0,s.jsx)(n.a,{href:"/docs/secrets/pki",children:"pki secrets engine"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/audit",children:"sys/audit"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"List enabled audit devices"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/audit",children:["sys/audit/",":path"]})}),(0,s.jsx)(n.td,{children:"POST, DELETE"}),(0,s.jsx)(n.td,{children:"Enable or remove an audit device"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/auth",children:["sys/auth/",":path"]})}),(0,s.jsx)(n.td,{children:"GET, POST, DELETE"}),(0,s.jsx)(n.td,{children:"Manage the auth methods (enable, read, and delete)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/auth#tune-auth-method",children:["sys/auth/",":path","/tune"]})}),(0,s.jsx)(n.td,{children:"GET, POST"}),(0,s.jsx)(n.td,{children:"Manage the auth methods (enable, read, delete, and tune)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/config-auditing",children:"sys/config/auditing/request-headers"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"List the request headers that are configured to be audited"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/config-auditing",children:["sys/config/auditing/request-headers/",":name"]})}),(0,s.jsx)(n.td,{children:"GET, POST, DELETE"}),(0,s.jsx)(n.td,{children:"Manage the auditing headers (create, update, read and delete)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/config-cors",children:"sys/config/cors"})}),(0,s.jsx)(n.td,{children:"GET, POST, DELETE"}),(0,s.jsx)(n.td,{children:"Configure CORS setting"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/config-ui",children:"sys/config/ui/headers"})}),(0,s.jsx)(n.td,{children:"GET, LIST"}),(0,s.jsx)(n.td,{children:"Configure the UI settings"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/config-ui#name",children:["sys/config/ui/headers/",":name"]})}),(0,s.jsx)(n.td,{children:"POST, DELETE"}),(0,s.jsx)(n.td,{children:"Configure custom HTTP headers to be served with the UI"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/inspect/router",children:["sys/internal/inspect/router/",":tag"]})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsxs)(n.td,{children:["Inspect the internal components of OpenBao's router. ",(0,s.jsx)(n.code,{children:"tag"})," must be one of root, uuid, accessor, or storage"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/leases#list-leases",children:["sys/leases/lookup/",":prefix"]})}),(0,s.jsx)(n.td,{children:"LIST"}),(0,s.jsx)(n.td,{children:"List lease IDs"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/leases#revoke-force",children:["sys/leases/revoke-force/",":prefix"]})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Revoke all secrets or tokens ignoring backend errors"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/leases#revoke-prefix",children:["sys/leases/revoke-prefix/",":prefix"]})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Revoke all secrets generated under a given prefix"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/plugins-catalog#register-plugin",children:["sys/plugins/catalog/",":type","/",":name"]})}),(0,s.jsx)(n.td,{children:"GET, POST, DELETE"}),(0,s.jsx)(n.td,{children:"Register a new plugin, or read/remove an existing plugin"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/raw",children:["sys/raw",":path"]})}),(0,s.jsx)(n.td,{children:"GET, POST, DELETE"}),(0,s.jsx)(n.td,{children:"Used to access the raw underlying store in OpenBao"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsxs)(n.a,{href:"/api-docs/system/raw#list-raw",children:["sys/raw",":prefix"]})}),(0,s.jsx)(n.td,{children:"GET, LIST"}),(0,s.jsx)(n.td,{children:"Returns a list keys for a given path prefix"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/remount",children:"sys/remount"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Moves an already-mounted backend to a new mount point"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/rotate",children:"sys/rotate"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Trigger a rotation of the backend encryption key"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/seal",children:"sys/seal"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Seals the OpenBao"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api-docs/system/step-down",children:"sys/step-down"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"Forces a node to give up active status"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"tokens",children:"Tokens"}),"\n",(0,s.jsx)(n.p,{children:"Tokens have two sets of policies: identity policies, which are computed\nbased on the entity and its groups, and token policies, which are either defined\nbased on the login method or, in the case of explicit token creates via the API,\nare an input to the token creation.  What follows concerns token policies\nexclusively: a token's identity policies cannot be controlled except by modifying\nthe underlying entities, groups, and group memberships."}),"\n",(0,s.jsx)(n.p,{children:"Tokens are associated with their policies at creation time. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell-session",children:"$ bao token create -policy=dev-readonly -policy=logs\n"})}),"\n",(0,s.jsx)(n.p,{children:"Normally the only policies that may be specified are those which are present\nin the current token's (i.e. the new token's parent's) token policies.\nHowever, root users can assign any policies."}),"\n",(0,s.jsx)(n.p,{children:"There is no way to modify the policies associated with a token once the token\nhas been issued. The token must be revoked and a new one acquired to receive a\nnew set of policies."}),"\n",(0,s.jsxs)(n.p,{children:["However, the ",(0,s.jsx)(n.em,{children:"contents"})," of policies are parsed in real-time whenever the token is used.\nAs a result, if a policy is modified, the modified rules will be in force the\nnext time a token, with that policy attached, is used to make a call to OpenBao."]}),"\n",(0,s.jsx)(n.h2,{id:"tutorial",children:"Tutorial"}),"\n",(0,s.jsx)(n.p,{children:"Refer to the following tutorials for further learning:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/tutorials/policies/policies",children:"OpenBao Policies"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/tutorials/policies/policy-templating",children:"ACL Policy Path Templating"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},43036:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/files/vault-auth-workflow-6f4f40f89fb36ebcec16790e0dccc9b3.svg"},40216:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/files/vault-policy-workflow-9df94d46dd5b2f6829755c2f5b6b2f1b.svg"},27985:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/vault-auth-workflow-6f4f40f89fb36ebcec16790e0dccc9b3.svg"},29185:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/vault-policy-workflow-9df94d46dd5b2f6829755c2f5b6b2f1b.svg"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);