"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1167],{21124:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=i(74848),s=i(28453);const a={layout:"docs",page_title:"Custom - Database - Secrets Engines",description:"The database secrets engine allows new functionality to be added through a\nplugin interface without needing to modify OpenBao's core code. This allows you\nwrite your own code to generate credentials in any database you wish. It also\nallows databases that require dynamically linked libraries to be used as\nplugins while keeping OpenBao itself statically linked."},r="Custom database secrets engines",o={id:"secrets/databases/custom",title:"Custom database secrets engines",description:"The database secrets engine allows new functionality to be added through a\nplugin interface without needing to modify OpenBao's core code. This allows you\nwrite your own code to generate credentials in any database you wish. It also\nallows databases that require dynamically linked libraries to be used as\nplugins while keeping OpenBao itself statically linked.",source:"@site/content/docs/secrets/databases/custom.mdx",sourceDirName:"secrets/databases",slug:"/secrets/databases/custom",permalink:"/openbao/docs/secrets/databases/custom",draft:!1,unlisted:!1,editUrl:"https://github.com/openbao/openbao/tree/main/website/content/docs/secrets/databases/custom.mdx",tags:[],version:"current",frontMatter:{layout:"docs",page_title:"Custom - Database - Secrets Engines",description:"The database secrets engine allows new functionality to be added through a\nplugin interface without needing to modify OpenBao's core code. This allows you\nwrite your own code to generate credentials in any database you wish. It also\nallows databases that require dynamically linked libraries to be used as\nplugins while keeping OpenBao itself statically linked."},sidebar:"docs",previous:{title:"Cassandra database secrets engine",permalink:"/openbao/docs/secrets/databases/cassandra"},next:{title:"InfluxDB database secrets engine",permalink:"/openbao/docs/secrets/databases/influxdb"}},l={},d=[{value:"Plugin interface",id:"plugin-interface",level:2},{value:"Serving a plugin",id:"serving-a-plugin",level:2},{value:"Serving a plugin with multiplexing",id:"serving-a-plugin-with-multiplexing",level:3},{value:"Serving a plugin without multiplexing",id:"serving-a-plugin-without-multiplexing",level:3},{value:"Running your plugin",id:"running-your-plugin",level:2},{value:"Updating database plugins to leverage plugin versioning",id:"updating-database-plugins-to-leverage-plugin-versioning",level:2},{value:"Upgrading database plugins to leverage plugin multiplexing",id:"upgrading-database-plugins-to-leverage-plugin-multiplexing",level:2},{value:"Background",id:"background",level:3},{value:"Upgrading your database plugin to leverage plugin multiplexing",id:"upgrading-your-database-plugin-to-leverage-plugin-multiplexing",level:3},{value:"When should plugin multiplexing be avoided?",id:"when-should-plugin-multiplexing-be-avoided",level:3},{value:"Upgrading database plugins to the v5 interface",id:"upgrading-database-plugins-to-the-v5-interface",level:2},{value:"Background",id:"background-1",level:3},{value:"Upgrading your custom database",id:"upgrading-your-custom-database",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"custom-database-secrets-engines",children:"Custom database secrets engines"}),"\n",(0,t.jsxs)(n.p,{children:["~> Version 5 of the interface for custom database plugins has been released.\nOpenBao will continue to recognize the now deprecated version 4 of this\ninterface for some time.  If you are using a plugin with the deprecated\ninterface, you should upgrade to the newest version. See ",(0,t.jsx)(n.a,{href:"#upgrading-database-plugins",children:"Upgrading database\nplugins"})," for more details."]}),"\n",(0,t.jsxs)(n.p,{children:["~> ",(0,t.jsx)(n.strong,{children:"Advanced topic!"})," Plugin development is a highly advanced topic in OpenBao,\nand is not required knowledge for day-to-day usage. If you don't plan on writing\nany plugins, feel free to skip this section of the documentation."]}),"\n",(0,t.jsx)(n.p,{children:"The database secrets engine allows new functionality to be added through a\nplugin interface without needing to modify OpenBao's core code. This allows you\nwrite your own code to generate credentials in any database you wish. It also\nallows databases that require dynamically linked libraries to be used as plugins\nwhile keeping OpenBao itself statically linked."}),"\n",(0,t.jsxs)(n.p,{children:["Please read the ",(0,t.jsx)(n.a,{href:"/docs/plugins",children:"Plugins internals"})," docs for more\ninformation about the plugin system before getting started building your\nDatabase plugin."]}),"\n",(0,t.jsxs)(n.p,{children:["Database plugins can be made to implement\n",(0,t.jsx)(n.a,{href:"/docs/plugins/plugin-architecture#plugin-multiplexing",children:"plugin multiplexing"}),"\nwhich allows a single plugin process to be used for multiple database\nconnections. To enable multiplexing, the plugin must be compiled with the\n",(0,t.jsx)(n.code,{children:"ServeMultiplex"})," function call from OpenBao's ",(0,t.jsx)(n.code,{children:"dbplugin"})," package."]}),"\n",(0,t.jsx)(n.h2,{id:"plugin-interface",children:"Plugin interface"}),"\n",(0,t.jsxs)(n.p,{children:["All plugins for the database secrets engine must implement the same interface. This interface\nis found in ",(0,t.jsx)(n.code,{children:"sdk/database/dbplugin/v5/database.go"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'type Database interface {\n\t// Initialize the database plugin. This is the equivalent of a constructor for the\n\t// database object itself.\n\tInitialize(ctx context.Context, req InitializeRequest) (InitializeResponse, error)\n\n\t// NewUser creates a new user within the database. This user is temporary in that it\n\t// will exist until the TTL expires.\n\tNewUser(ctx context.Context, req NewUserRequest) (NewUserResponse, error)\n\n\t// UpdateUser updates an existing user within the database.\n\tUpdateUser(ctx context.Context, req UpdateUserRequest) (UpdateUserResponse, error)\n\n\t// DeleteUser from the database. This should not error if the user didn\'t\n\t// exist prior to this call.\n\tDeleteUser(ctx context.Context, req DeleteUserRequest) (DeleteUserResponse, error)\n\n\t// Type returns the Name for the particular database backend implementation.\n\t// This type name is usually set as a constant within the database backend\n\t// implementation, e.g. "mysql" for the MySQL database backend. This is used\n\t// for things like metrics and logging. No behavior is switched on this.\n\tType() (string, error)\n\n\t// Close attempts to close the underlying database connection that was\n\t// established by the backend.\n\tClose() error\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Each of the request and response objects can also be found in ",(0,t.jsx)(n.code,{children:"sdk/database/dbplugin/v5/database.go"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["In each of the requests, you will see at least 1 ",(0,t.jsx)(n.code,{children:"Statements"})," object (in ",(0,t.jsx)(n.code,{children:"UpdateUserRequest"}),"\nthey are in sub-fields). This object represents the set of commands to run for that particular\noperation. For the ",(0,t.jsx)(n.code,{children:"NewUser"})," function, this is a set of commands to create the user (and often\nset permissions for that user). These statements are from the following fields in the API:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"API Argument"}),(0,t.jsx)(n.th,{children:"Request Object"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"creation_statements"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"NewUserRequest.Statements.Commands"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"revocation_statements"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DeleteUserRequest.Statements.Commands"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rollback_statements"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"NewUserRequest.RollbackStatements.Commands"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"renew_statements"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"UpdateUserRequest.Expiration.Statements.Commands"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rotation_statements"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"UpdateUserRequest.Password.Statements.Commands"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"root_rotation_statements"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"UpdateUserRequest.Password.Statements.Commands"})})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["In many of the built-in plugins, they replace ",(0,t.jsx)(n.code,{children:"{{name}}"})," (or ",(0,t.jsx)(n.code,{children:"{{username}}"}),"), ",(0,t.jsx)(n.code,{children:"{{password}}"}),",\nand/or ",(0,t.jsx)(n.code,{children:"{{expiration}}"})," with the associated values. It is up to your plugin to perform these\nstring replacements. There is a helper function located in ",(0,t.jsx)(n.code,{children:"sdk/database/helper/dbutil"}),"\ncalled ",(0,t.jsx)(n.code,{children:"QueryHelper"})," that assists in doing this string replacement. You are not required to\nuse it, but it will make your plugin's behavior consistent with the built-in plugins."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"InitializeRequest"})," object contains a map of keys to values. This data is what the\nuser specified as the configuration for the plugin. Your plugin should use this\ndata to make connections to the database. The response object contains a similar configuration\nmap. The response object should contain the configuration map that should be saved within OpenBao.\nThis allows the plugin to manipulate the configuration prior to saving it."]}),"\n",(0,t.jsxs)(n.p,{children:["It is also passed a boolean value (",(0,t.jsx)(n.code,{children:"InitializeRequest.VerifyConnection"}),") indicating if your\nplugin should initialize a connection to the database during the ",(0,t.jsx)(n.code,{children:"Initialize"})," call. This\nfunction is called when the configuration is written. This allows the user to know whether\nthe configuration is valid and able to connect to the database in question. If this is set to\nfalse, no connection should be made during the ",(0,t.jsx)(n.code,{children:"Initialize"})," call, but subsequent calls to the\nother functions will need to open a connection."]}),"\n",(0,t.jsx)(n.h2,{id:"serving-a-plugin",children:"Serving a plugin"}),"\n",(0,t.jsx)(n.h3,{id:"serving-a-plugin-with-multiplexing",children:"Serving a plugin with multiplexing"}),"\n",(0,t.jsxs)(n.p,{children:["~> Plugin multiplexing requires ",(0,t.jsx)(n.code,{children:"github.com/openbao/openbao/sdk v0.4.0"})," or above."]}),"\n",(0,t.jsxs)(n.p,{children:["The plugin runs as a separate binary outside of OpenBao, so the plugin itself\nwill need a ",(0,t.jsx)(n.code,{children:"main"})," function. Use the ",(0,t.jsx)(n.code,{children:"ServeMultiplex"})," function within\n",(0,t.jsx)(n.code,{children:"sdk/database/dbplugin/v5"})," to serve your multiplexed plugin."]}),"\n",(0,t.jsx)(n.p,{children:"Below is an example setup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"github.com/openbao/openbao/api"\n\tdbplugin "github.com/openbao/openbao/sdk/database/dbplugin/v5"\n)\n\nfunc main() {\n\tapiClientMeta := &api.PluginAPIClientMeta{}\n\tflags := apiClientMeta.FlagSet()\n\tflags.Parse(os.Args[1:])\n\n\terr := Run()\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc Run() error {\n\tdbplugin.ServeMultiplex(dbType.(dbplugin.New))\n\n\treturn nil\n}\n\nfunc New() (interface{}, error) {\n\tdb, err := newDatabase()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// This middleware isn\'t strictly required, but highly recommended to prevent accidentally exposing\n\t// values such as passwords in error messages. An example of this is included below\n\tdb = dbplugin.NewDatabaseErrorSanitizerMiddleware(db, db.secretValues)\n\treturn db, nil\n}\n\ntype MyDatabase struct {\n\t// Variables for the database\n\tpassword string\n}\n\nfunc newDatabase() (MyDatabase, error) {\n\t// ...\n\tdb := &MyDatabase{\n\t\t// ...\n\t}\n\treturn db, nil\n}\n\nfunc (db *MyDatabase) secretValues() map[string]string {\n\treturn map[string]string{\n\t\tdb.password: "[password]",\n\t}\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Replacing ",(0,t.jsx)(n.code,{children:"MyDatabase"})," with the actual implementation of your database plugin."]}),"\n",(0,t.jsx)(n.h3,{id:"serving-a-plugin-without-multiplexing",children:"Serving a plugin without multiplexing"}),"\n",(0,t.jsxs)(n.p,{children:["Serving a plugin without multiplexing requires calling the ",(0,t.jsx)(n.code,{children:"Serve"})," function\nfrom ",(0,t.jsx)(n.code,{children:"sdk/database/dbplugin/v5"})," to serve your plugin."]}),"\n",(0,t.jsxs)(n.p,{children:["The setup is exactly the same as the multiplexed case above, except for the\n",(0,t.jsx)(n.code,{children:"Run"})," function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"func Run() error {\n\tdbType, err := New()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdbplugin.Serve(dbType.(dbplugin.Database))\n\n\treturn nil\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"running-your-plugin",children:"Running your plugin"}),"\n",(0,t.jsxs)(n.p,{children:["The above main package, once built, will supply you with a binary of your\nplugin. We also recommend if you are planning on distributing your plugin to\nbuild with ",(0,t.jsx)(n.a,{href:"https://github.com/mitchellh/gox",children:"gox"})," for cross platform builds."]}),"\n",(0,t.jsxs)(n.p,{children:["To use your plugin with the database secrets engine you need to place the binary in the\nplugin directory as specified in the ",(0,t.jsx)(n.a,{href:"/docs/plugins",children:"plugin internals"})," docs."]}),"\n",(0,t.jsx)(n.p,{children:"You should now be able to register your plugin into the OpenBao catalog. To do\nthis your token will need sudo permissions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell-session",children:'$ bao write sys/plugins/catalog/database/mydatabase-database-plugin \\\n    sha256="..." \\\n    command="mydatabase"\nSuccess! Data written to: sys/plugins/catalog/database/mydatabase-database-plugin\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now you should be able to configure your plugin like any other:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell-session",children:'$ bao write database/config/mydatabase \\\n    plugin_name=mydatabase-database-plugin \\\n    allowed_roles="readonly" \\\n    myplugins_connection_details="..."\n'})}),"\n",(0,t.jsx)(n.h2,{id:"updating-database-plugins-to-leverage-plugin-versioning",children:"Updating database plugins to leverage plugin versioning"}),"\n",(0,t.jsxs)(n.p,{children:["Plugins can optionally self-report their own semantic version. For plugins that\ndo so, OpenBao will automatically populate the plugin's version in the catalog\nwithout requiring the user to provide it. If users do provide a version during\nregistration, OpenBao will error if the version provided does not match what the\nplugin reports. Plugins that report a non-empty version ",(0,t.jsx)(n.em,{children:"must"})," report a valid\n",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"Semantic Version"})," with a leading 'v' added or registration\nwill fail, e.g. ",(0,t.jsx)(n.code,{children:"v1.0.0"})," or ",(0,t.jsx)(n.code,{children:"v2.3.2-beta"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Plugins that want to opt into this behavior can implement the version interface.\nHowever, it is not a prerequisite; users can still provide a version during\nregistration if the plugin does not implement the version interface."}),"\n",(0,t.jsxs)(n.p,{children:["In addition to the ",(0,t.jsx)(n.code,{children:"Database"})," interface above, database plugins can then also\nimplement the\n",(0,t.jsx)(n.a,{href:"https://github.com/openbao/openbao/blob/sdk/v0.6.0/sdk/logical/logical.go#L150-L154",children:(0,t.jsx)(n.code,{children:"PluginVersioner"})}),"\ninterface:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"// PluginVersioner is an optional interface to return version info.\ntype PluginVersioner interface {\n\t// PluginVersion returns the version for the backend\n\tPluginVersion() PluginVersion\n}\n\ntype PluginVersion struct {\n\tVersion string\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"upgrading-database-plugins-to-leverage-plugin-multiplexing",children:"Upgrading database plugins to leverage plugin multiplexing"}),"\n",(0,t.jsx)(n.h3,{id:"background",children:"Background"}),"\n",(0,t.jsxs)(n.p,{children:["Scaling many external plugins can become resource intensive. To address\nperformance problems with scaling external plugins, database plugins can be\nmade to implement ",(0,t.jsx)(n.a,{href:"/docs/plugins/plugin-architecture#plugin-multiplexing",children:"plugin multiplexing"}),"\nwhich allows a single plugin process to be used for multiple database\nconnections. To enable multiplexing, the plugin must be compiled with the\n",(0,t.jsx)(n.code,{children:"ServeMultiplex"})," function call from OpenBao's ",(0,t.jsx)(n.code,{children:"dbplugin"})," package."]}),"\n",(0,t.jsx)(n.h3,{id:"upgrading-your-database-plugin-to-leverage-plugin-multiplexing",children:"Upgrading your database plugin to leverage plugin multiplexing"}),"\n",(0,t.jsxs)(n.p,{children:["There is only one step required to upgrade from a non-multiplexed to a\nmultiplexed database plugin: Change the ",(0,t.jsx)(n.code,{children:"Serve"})," function call to ",(0,t.jsx)(n.code,{children:"ServeMultiplex"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This will run the RPC server for the plugin just as before. However, the\n",(0,t.jsx)(n.code,{children:"ServeMultiplex"})," function takes the factory function directly as its argument.\nThis factory function is a function that returns an object that implements the\n",(0,t.jsxs)(n.a,{href:"/docs/secrets/databases/custom#plugin-interface",children:[(0,t.jsx)(n.code,{children:"dbplugin.Database"})," interface"]}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"when-should-plugin-multiplexing-be-avoided",children:"When should plugin multiplexing be avoided?"}),"\n",(0,t.jsx)(n.p,{children:"Some use cases that should avoid plugin multiplexing might include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Plugin process level separation is required"}),"\n",(0,t.jsx)(n.li,{children:"Avoiding restart across all mounts/database connections for a plugin type on\ncrashes or plugin reload calls"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"upgrading-database-plugins-to-the-v5-interface",children:"Upgrading database plugins to the v5 interface"}),"\n",(0,t.jsx)(n.h3,{id:"background-1",children:"Background"}),"\n",(0,t.jsx)(n.p,{children:"The new interface was introduced for several reasons:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/concepts/password-policies",children:"Password policies"})," required that\nOpenBao be responsible for generating passwords. In the prior version, the\ndatabase plugin was responsible for generating passwords. This prevented\nintegration with password policies."]}),"\n",(0,t.jsx)(n.li,{children:"Passwords needed to be generated by database plugins. This meant that plugin authors\nwere responsible for generating secure passwords. This should be done with a helper\nfunction available within the OpenBao SDK, however there was nothing preventing an\nauthor from generating insecure passwords."}),"\n",(0,t.jsxs)(n.li,{children:["There were a number of inconsistencies within the version 4 interface that made it\nconfusing for authors. For instance: passwords were handled in 3 different ways.\n",(0,t.jsx)(n.code,{children:"CreateUser"})," generated a password and returned it, ",(0,t.jsx)(n.code,{children:"SetCredentials"})," receives a password\nvia a configuration struct and returns it, and ",(0,t.jsx)(n.code,{children:"RotateRootCredentials"})," generated a\npassword and was expected to return an updated copy of its entire configuration\nwith the new password."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"SetCredentials"})," and ",(0,t.jsx)(n.code,{children:"RotateRootCredentials"})," used for static credential rotation,\nand rotating the root user's credentials respectively were essentially the same operation:\nchange a user's password. The only practical difference was which user it was referring\nto. This was especially evident when ",(0,t.jsx)(n.code,{children:"SetCredentials"})," was used when rotating root\ncredentials (unless static credential rotation wasn't supported by the plugin in question)."]}),"\n",(0,t.jsxs)(n.li,{children:["The old interface included both ",(0,t.jsx)(n.code,{children:"Init"})," and ",(0,t.jsx)(n.code,{children:"Initialize"})," adding to the confusion."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The new interface is roughly modeled after a ",(0,t.jsx)(n.a,{href:"https://grpc.io/",children:"gRPC"})," interface. It has improved\nfuture compatibility by not requiring changes to the interface definition to add additional data\nin the requests or responses. It also simplifies the interface by merging several into a single\nfunction call."]}),"\n",(0,t.jsx)(n.h3,{id:"upgrading-your-custom-database",children:"Upgrading your custom database"}),"\n",(0,t.jsx)(n.p,{children:"OpenBao supports both version 4 and version 5 database plugins. The support for\nversion 4 plugins will be removed in a future release. To determine if a plugin\nis using version 4 or version 5, the following is a list of changes in no\nparticular order that you can check against your plugin to determine the\nversion:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The import path for version 4 is ",(0,t.jsx)(n.code,{children:"github.com/openbao/openbao/sdk/database/dbplugin"}),"\nwhereas the import path for version 5 is ",(0,t.jsx)(n.code,{children:"github.com/openbao/openbao/sdk/database/dbplugin/v5"})]}),"\n",(0,t.jsxs)(n.li,{children:["Version 4 has the following functions: ",(0,t.jsx)(n.code,{children:"Initialize"}),", ",(0,t.jsx)(n.code,{children:"Init"}),", ",(0,t.jsx)(n.code,{children:"CreateUser"}),", ",(0,t.jsx)(n.code,{children:"RenewUser"}),",\n",(0,t.jsx)(n.code,{children:"RevokeUser"}),", ",(0,t.jsx)(n.code,{children:"SetCredentials"}),", ",(0,t.jsx)(n.code,{children:"RotateRootCredentials"}),", ",(0,t.jsx)(n.code,{children:"Type"}),", and ",(0,t.jsx)(n.code,{children:"Close"}),". You can see the\nfull function signatures in ",(0,t.jsx)(n.code,{children:"sdk/database/dbplugin/plugin.go"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Version 5 has the following functions: ",(0,t.jsx)(n.code,{children:"Initialize"}),", ",(0,t.jsx)(n.code,{children:"NewUser"}),", ",(0,t.jsx)(n.code,{children:"UpdateUser"}),", ",(0,t.jsx)(n.code,{children:"DeleteUser"}),",\n",(0,t.jsx)(n.code,{children:"Type"}),", and ",(0,t.jsx)(n.code,{children:"Close"}),". You can see the full function signatures in\n",(0,t.jsx)(n.code,{children:"sdk/database/dbplugin/v5/database.go"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If you are using a version 4 custom database plugin, the following are basic instructions\nfor upgrading to version 5."}),"\n",(0,t.jsxs)(n.p,{children:["-> In version 4, password generation was the responsibility of the plugin. This is no longer\nthe case with version 5. OpenBao is responsible for generating passwords and passing them to\nthe plugin via ",(0,t.jsx)(n.code,{children:"NewUserRequest.Password"})," and ",(0,t.jsx)(n.code,{children:"UpdateUserRequest.Password.NewPassword"}),"."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Change the import path from ",(0,t.jsx)(n.code,{children:"github.com/openbao/openbao/sdk/database/dbplugin"})," to\n",(0,t.jsx)(n.code,{children:"github.com/openbao/openbao/sdk/database/dbplugin/v5"}),". The package name is the same, so any\nreferences to ",(0,t.jsx)(n.code,{children:"dbplugin"})," can remain as long as those symbols exist within the new package\n(such as the ",(0,t.jsx)(n.code,{children:"Serve"})," function)."]}),"\n",(0,t.jsxs)(n.li,{children:["An easy way to see what functions need to be implemented is to put the following as a\nglobal variable within your package: ",(0,t.jsx)(n.code,{children:"var _ dbplugin.Database = (*MyDatabase)(nil)"}),". This\nwill fail to compile if the ",(0,t.jsx)(n.code,{children:"MyDatabase"})," type does not adhere to the ",(0,t.jsx)(n.code,{children:"dbplugin.Database"})," interface."]}),"\n",(0,t.jsxs)(n.li,{children:["Replace ",(0,t.jsx)(n.code,{children:"Init"})," and ",(0,t.jsx)(n.code,{children:"Initialize"})," with the new ",(0,t.jsx)(n.code,{children:"Initialize"})," function definition. The fields that\n",(0,t.jsx)(n.code,{children:"Init"})," was taking (",(0,t.jsx)(n.code,{children:"config"})," and ",(0,t.jsx)(n.code,{children:"verifyConnection"}),") are now wrapped into ",(0,t.jsx)(n.code,{children:"InitializeRequest"}),".\nThe returned ",(0,t.jsx)(n.code,{children:"map[string]interface{}"})," object is now wrapped into ",(0,t.jsx)(n.code,{children:"InitializeResponse"}),".\nOnly ",(0,t.jsx)(n.code,{children:"Initialize"})," is needed to adhere to the ",(0,t.jsx)(n.code,{children:"Database"})," interface."]}),"\n",(0,t.jsxs)(n.li,{children:["Update ",(0,t.jsx)(n.code,{children:"CreateUser"})," to ",(0,t.jsx)(n.code,{children:"NewUser"}),". The ",(0,t.jsx)(n.code,{children:"NewUserRequest"})," object contains the username and\npassword of the user to be created. It also includes a list of statements for creating the\nuser as well as several other fields that may or may not be applicable. Your custom plugin\nshould use the password provided in the request, not generate one. If you generate a password\ninstead, OpenBao will not know about it and will give the caller the wrong password."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SetCredentials"}),", ",(0,t.jsx)(n.code,{children:"RotateRootCredentials"}),", and ",(0,t.jsx)(n.code,{children:"RenewUser"})," are combined into ",(0,t.jsx)(n.code,{children:"UpdateUser"}),".\nThe request object, ",(0,t.jsx)(n.code,{children:"UpdateUserRequest"})," contains three parts: the username to change, a\n",(0,t.jsx)(n.code,{children:"ChangePassword"})," and a ",(0,t.jsx)(n.code,{children:"ChangeExpiration"})," object. When one of the objects is not nil, this\nindicates that particular field (password or expiration) needs to change. For instance, if\nthe ",(0,t.jsx)(n.code,{children:"ChangePassword"})," field is not-nil, the user's password should be changed. This is\nequivalent to calling ",(0,t.jsx)(n.code,{children:"SetCredentials"}),". If the ",(0,t.jsx)(n.code,{children:"ChangeExpiration"})," field is not-nil, the\nuser's expiration date should be changed. This is equivalent to calling ",(0,t.jsx)(n.code,{children:"RenewUser"}),".\nMany databases don't need to do anything with the updated expiration."]}),"\n",(0,t.jsxs)(n.li,{children:["Update ",(0,t.jsx)(n.code,{children:"RevokeUser"})," to ",(0,t.jsx)(n.code,{children:"DeleteUser"}),". This is the simplest change. The username to be\ndeleted is enclosed in the ",(0,t.jsx)(n.code,{children:"DeleteUserRequest"})," object."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(96540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);